"use strict";(self.webpackChunkbedrock_tech=self.webpackChunkbedrock_tech||[]).push([[97734],{15680:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>d});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},g=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,d=m["".concat(s,".").concat(c)]||m[c]||y[c]||l;return n?a.createElement(d,o(o({ref:t},g),{},{components:n})):a.createElement(d,o({ref:t},g))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},98232:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(58168),r=(n(96540),n(15680));const l={id:"BlockPermutation",title:"Class: BlockPermutation",sidebar_label:"BlockPermutation",sidebar_position:0,custom_edit_url:null},o=void 0,i={unversionedId:"sapi/stable/server/classes/BlockPermutation",id:"sapi/stable/server/classes/BlockPermutation",title:"Class: BlockPermutation",description:"Contains the combination of type BlockType and",source:"@site/docs/sapi/stable/server/classes/BlockPermutation.md",sourceDirName:"sapi/stable/server/classes",slug:"/sapi/stable/server/classes/BlockPermutation",permalink:"/en/docs/sapi/stable/server/classes/BlockPermutation",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"BlockPermutation",title:"Class: BlockPermutation",sidebar_label:"BlockPermutation",sidebar_position:0,custom_edit_url:null},sidebar:"sapiStableSidebar",previous:{title:"BlockLocationIterator",permalink:"/en/docs/sapi/stable/server/classes/BlockLocationIterator"},next:{title:"BlockPistonComponent",permalink:"/en/docs/sapi/stable/server/classes/BlockPistonComponent"}},s={},p=[{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Properties",id:"properties",level:2},{value:"type",id:"type",level:3},{value:"Methods",id:"methods",level:2},{value:"clone",id:"clone",level:3},{value:"Returns",id:"returns",level:4},{value:"getAllStates",id:"getallstates",level:3},{value:"Returns",id:"returns-1",level:4},{value:"getItemStack",id:"getitemstack",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-2",level:4},{value:"getState",id:"getstate",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-3",level:4},{value:"getTags",id:"gettags",level:3},{value:"Returns",id:"returns-4",level:4},{value:"hasTag",id:"hastag",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-5",level:4},{value:"matches",id:"matches",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-6",level:4},{value:"withState",id:"withstate",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-7",level:4},{value:"resolve",id:"resolve",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-8",level:4}],g={toc:p},m="wrapper";function y(e){let{components:t,...n}=e;return(0,r.yg)(m,(0,a.A)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Contains the combination of type ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/BlockType"},"BlockType")," and\nproperties (also sometimes called block state) which\ndescribe a block (but does not belong to a specific ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/Block"},"Block"),")."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"createTranslatedSign.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"// A function the creates a sign at the specified location with the specified text\nimport { DimensionLocation, BlockPermutation, BlockComponentTypes } from '@minecraft/server';\nimport { MinecraftBlockTypes } from '@minecraft/vanilla-data';\n\nfunction createSignAt(location: DimensionLocation) {\n    const signBlock = location.dimension.getBlock(location);\n\n    if (!signBlock) {\n        console.warn('Could not find a block at specified location.');\n        return;\n    }\n\n    const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\n    signBlock.setPermutation(signPerm); // Update block to be a sign\n\n    // Update the sign block's text\n    // with \"Steve's Head\"\n    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign);\n    if (signComponent) {\n        signComponent.setText({ translate: 'item.skull.player.name', with: ['Steve'] });\n    }\n}\n")),(0,r.yg)("h2",{id:"constructors"},"Constructors"),(0,r.yg)("h3",{id:"constructor"},"constructor"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"Private")," ",(0,r.yg)("strong",{parentName:"p"},"new BlockPermutation"),"()"),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)("h3",{id:"type"},"type"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.yg)("strong",{parentName:"p"},"type"),": ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/BlockType"},(0,r.yg)("inlineCode",{parentName:"a"},"BlockType"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"The ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/BlockType"},"BlockType")," that the permutation has."),(0,r.yg)("h2",{id:"methods"},"Methods"),(0,r.yg)("h3",{id:"clone"},"clone"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"clone"),"(): ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/BlockPermutation"},(0,r.yg)("inlineCode",{parentName:"a"},"BlockPermutation"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Creates a copy of this permutation."),(0,r.yg)("h4",{id:"returns"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/BlockPermutation"},(0,r.yg)("inlineCode",{parentName:"a"},"BlockPermutation"))),(0,r.yg)("p",null,"A copy of the permutation."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getallstates"},"getAllStates"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getAllStates"),"(): ",(0,r.yg)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.yg)("inlineCode",{parentName:"p"},"string"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"string")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"p"},"number")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"p"},"boolean"),">"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns all available block states associated with this\nblock."),(0,r.yg)("h4",{id:"returns-1"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Record"),"<",(0,r.yg)("inlineCode",{parentName:"p"},"string"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"string")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"p"},"number")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"p"},"boolean"),">"),(0,r.yg)("p",null,"Returns the list of all of the block states that the\npermutation has."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getitemstack"},"getItemStack"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getItemStack"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"amount?"),"): ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/ItemStack"},(0,r.yg)("inlineCode",{parentName:"a"},"ItemStack"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Retrieves a prototype item stack based on this block\npermutation that can be used with item\nContainer/ContainerSlot APIs."),(0,r.yg)("h4",{id:"parameters"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"amount?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"number")),(0,r.yg)("td",{parentName:"tr",align:"left"},"Number of instances of this block to place in the prototype item stack.")))),(0,r.yg)("h4",{id:"returns-2"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/ItemStack"},(0,r.yg)("inlineCode",{parentName:"a"},"ItemStack"))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getstate"},"getState"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getState"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"stateName"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"string")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"p"},"number")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"p"},"boolean")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Gets a state for the permutation."),(0,r.yg)("h4",{id:"parameters-1"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"stateName")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},"Name of the block state who's value is to be returned.")))),(0,r.yg)("h4",{id:"returns-3"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"p"},"number")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"p"},"boolean")),(0,r.yg)("p",null,"Returns the state if the permutation has it, else\n",(0,r.yg)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"gettags"},"getTags"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getTags"),"(): ",(0,r.yg)("inlineCode",{parentName:"p"},"string"),"[]"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Creates a copy of the permutation."),(0,r.yg)("h4",{id:"returns-4"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string"),"[]"),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"hastag"},"hasTag"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"hasTag"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"tag"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"boolean")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Checks to see if the permutation has a specific tag."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"check_block_tags.js"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'import { world } from "@minecraft/server";\n\n// Fetch the block\nconst block = world.getDimension("overworld").getBlock({ x: 1, y: 2, z: 3 });\nconst blockPerm = block.getPermutation();\n\nconsole.log(`Block is dirt: ${blockPerm.hasTag("dirt")}`);\nconsole.log(`Block is wood: ${blockPerm.hasTag("wood")}`);\nconsole.log(`Block is stone: ${blockPerm.hasTag("stone")}`);\n')),(0,r.yg)("h4",{id:"parameters-2"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"tag")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string"))))),(0,r.yg)("h4",{id:"returns-5"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"boolean")),(0,r.yg)("p",null,"Returns ",(0,r.yg)("inlineCode",{parentName:"p"},"true")," if the permutation has the tag, else ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"matches"},"matches"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"matches"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"blockName"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"states?"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"boolean")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns a boolean whether a specified permutation matches\nthis permutation. If states is not specified, matches checks\nagainst the set of types more broadly."),(0,r.yg)("h4",{id:"parameters-3"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"blockName")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},"An optional set of states to compare against.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"states?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"Record"),"<",(0,r.yg)("inlineCode",{parentName:"td"},"string"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"td"},"boolean"),">"),(0,r.yg)("td",{parentName:"tr",align:"left"},"-")))),(0,r.yg)("h4",{id:"returns-6"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"boolean")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"withstate"},"withState"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"withState"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"name"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"value"),"): ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/BlockPermutation"},(0,r.yg)("inlineCode",{parentName:"a"},"BlockPermutation"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns a derived BlockPermutation with a specific property\nset."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"This function can throw errors."),(0,r.yg)("h4",{id:"parameters-4"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"name")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},"Identifier of the block property.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"value")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"td"},"boolean")),(0,r.yg)("td",{parentName:"tr",align:"left"},"Value of the block property.")))),(0,r.yg)("h4",{id:"returns-7"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/BlockPermutation"},(0,r.yg)("inlineCode",{parentName:"a"},"BlockPermutation"))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"resolve"},"resolve"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("inlineCode",{parentName:"p"},"Static")," ",(0,r.yg)("strong",{parentName:"p"},"resolve"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"blockName"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"states?"),"): ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/BlockPermutation"},(0,r.yg)("inlineCode",{parentName:"a"},"BlockPermutation"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Given a type identifier and an optional set of properties,\nwill return a BlockPermutation object that is usable in\nother block APIs (e.g., block.setPermutation)"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"This function can throw errors."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"addBlockColorCube.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { DimensionLocation, BlockPermutation } from '@minecraft/server';\nimport { MinecraftBlockTypes } from '@minecraft/vanilla-data';\n\nconst allWoolBlocks: string[] = [\n    MinecraftBlockTypes.WhiteWool,\n    MinecraftBlockTypes.OrangeWool,\n    MinecraftBlockTypes.MagentaWool,\n    MinecraftBlockTypes.LightBlueWool,\n    MinecraftBlockTypes.YellowWool,\n    MinecraftBlockTypes.LimeWool,\n    MinecraftBlockTypes.PinkWool,\n    MinecraftBlockTypes.GrayWool,\n    MinecraftBlockTypes.LightGrayWool,\n    MinecraftBlockTypes.CyanWool,\n    MinecraftBlockTypes.PurpleWool,\n    MinecraftBlockTypes.BlueWool,\n    MinecraftBlockTypes.BrownWool,\n    MinecraftBlockTypes.GreenWool,\n    MinecraftBlockTypes.RedWool,\n    MinecraftBlockTypes.BlackWool,\n];\n\nconst cubeDim = 7;\n\nfunction placeRainbowCube(location: DimensionLocation) {\n    let colorIndex = 0;\n    for (let x = 0; x <= cubeDim; x++) {\n        for (let y = 0; y <= cubeDim; y++) {\n            for (let z = 0; z <= cubeDim; z++) {\n                colorIndex++;\n                location.dimension\n                    .getBlock({ x: location.x + x, y: location.y + y, z: location.z + z })\n                    ?.setPermutation(BlockPermutation.resolve(allWoolBlocks[colorIndex % allWoolBlocks.length]));\n            }\n        }\n    }\n}\n")),(0,r.yg)("h4",{id:"parameters-5"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"blockName")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},"Identifier of the block to check.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"states?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"Record"),"<",(0,r.yg)("inlineCode",{parentName:"td"},"string"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"td"},"boolean"),">"),(0,r.yg)("td",{parentName:"tr",align:"left"},"-")))),(0,r.yg)("h4",{id:"returns-8"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/BlockPermutation"},(0,r.yg)("inlineCode",{parentName:"a"},"BlockPermutation"))))}y.isMDXComponent=!0}}]);