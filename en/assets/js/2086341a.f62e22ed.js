"use strict";(self.webpackChunkbedrock_tech=self.webpackChunkbedrock_tech||[]).push([[93060],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>k});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=o.createContext({}),p=function(e){var t=o.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(r),d=n,k=u["".concat(c,".").concat(d)]||u[d]||m[d]||a;return r?o.createElement(k,l(l({ref:t},s),{},{components:r})):o.createElement(k,l({ref:t},s))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,l=new Array(a);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:n,l[1]=i;for(var p=2;p<a;p++)l[p]=r[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},98238:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=r(87462),n=(r(67294),r(3905));const a={},l=void 0,i={unversionedId:"changelog_source/preview/1.19.70.23/tech_sapi",id:"changelog_source/preview/1.19.70.23/tech_sapi",title:"tech_sapi",description:"BlockPermutation",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/changelog_source/preview/1.19.70.23/tech_sapi.md",sourceDirName:"changelog_source/preview/1.19.70.23",slug:"/changelog_source/preview/1.19.70.23/tech_sapi",permalink:"/en/docs/changelog_source/preview/1.19.70.23/tech_sapi",draft:!1,editUrl:"https://github.com/AbbottMc/BedrockTechWeekly/tree/master/docs/changelog_source/preview/1.19.70.23/tech_sapi.md",tags:[],version:"current",frontMatter:{}},c={},p=[{value:"<strong>BlockPermutation</strong>",id:"blockpermutation",level:3},{value:"<strong>BlockProperties</strong>",id:"blockproperties",level:3},{value:"<strong>BlockPropertyType</strong>",id:"blockpropertytype",level:3}],s={toc:p};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h3",{id:"blockpermutation"},(0,n.kt)("strong",{parentName:"h3"},"BlockPermutation")),(0,n.kt)("p",null,"BlockPermutation has been significantly refactored! Every BlockPermutation now share a unique JavaScript handle so exact equality (===) will work for permutations that share exactly the same state values. We've also added utility methods that make interacting with permutations easier, which includes the removal of the ",(0,n.kt)("em",{parentName:"p"},"XBlockProperty")," classes and now directly return properties ",(0,n.kt)("em",{parentName:"p"},"(",(0,n.kt)("strong",{parentName:"em"},"boolean | number | string"),")")," or a while collection of properties ",(0,n.kt)("em",{parentName:"p"},"(",(0,n.kt)("strong",{parentName:"em"},"Record<string, boolean | number | string>"),")"),"."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Added method ",(0,n.kt)("em",{parentName:"li"},"matches(blockName: string, properties?: BlockProperties): boolean")," which is used to match a block with optional states against a BlockPermutation."),(0,n.kt)("li",{parentName:"ul"},"Added method ",(0,n.kt)("em",{parentName:"li"},"withProperty(name: string, value: boolean | number | string): BlockPermutation;")," which returns a new block permutation with a given property set to a specific value. Throws if the provided data cannot be resolved as a valid block permutation."),(0,n.kt)("li",{parentName:"ul"},"Added ",(0,n.kt)("em",{parentName:"li"},"function")," ",(0,n.kt)("em",{parentName:"li"},"static resolve(blockName: string, properties?: BlockProperties): BlockPermutation")," which resolve a BlockPermutation from a block name and optional states. Throws if the provided data cannot be resolved as a valid block permutation."),(0,n.kt)("li",{parentName:"ul"},"Updated methods ",(0,n.kt)("em",{parentName:"li"},"getProperty")," and ",(0,n.kt)("em",{parentName:"li"},"getAllProperties")," to return values directly instead of wrapped into class objects. Example code:")),(0,n.kt)("p",null,"Before:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const blockPermutation = MinecraftBlockTypes.stoneSlab.createDefaultBlockPermutation();\nblockPermutation.getProperty(MinecraftBlockProperties.stoneSlabType).value = 'stone_brick';\nblockPermutation.getProperty(MinecraftBlockProperties.topSlotBit).value = true; \n")),(0,n.kt)("p",null,"Now:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"const blockPermutation = BlockPermutation.resolve( 'minecraft:stone_slab', { stone_slab_type: 'stone_brick',  top_slot_bit: true});\n")),(0,n.kt)("h3",{id:"blockproperties"},(0,n.kt)("strong",{parentName:"h3"},"BlockProperties")),(0,n.kt)("p",null,"Added new class to expose ",(0,n.kt)("em",{parentName:"p"},"BlockPropertyType"),"."),(0,n.kt)("h3",{id:"blockpropertytype"},(0,n.kt)("strong",{parentName:"h3"},"BlockPropertyType")),(0,n.kt)("p",null,'Added new class to track "definitional" data about block properties. This is how you can find which values are valid for each block property.'))}u.isMDXComponent=!0}}]);