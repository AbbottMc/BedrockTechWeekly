"use strict";(self.webpackChunkbedrock_tech=self.webpackChunkbedrock_tech||[]).push([[52692],{71178:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=o(74848),s=o(28453);const r={},i="Enumeration: CompoundBlockVolumeAction",c={id:"sapi/preview/server/enumerations/CompoundBlockVolumeAction",title:"Enumeration: CompoundBlockVolumeAction",description:"The Action enum determines how the CompoundBlockVolume",source:"@site/docs/sapi/preview/server/enumerations/CompoundBlockVolumeAction.md",sourceDirName:"sapi/preview/server/enumerations",slug:"/sapi/preview/server/enumerations/CompoundBlockVolumeAction",permalink:"/en/docs/sapi/preview/server/enumerations/CompoundBlockVolumeAction",draft:!1,unlisted:!1,editUrl:"https://github.com/AbbottMc/BedrockTechWeekly/tree/master/docs/sapi/preview/server/enumerations/CompoundBlockVolumeAction.md",tags:[],version:"current",frontMatter:{},sidebar:"sapiPreviewSidebar",previous:{title:"BlockVolumeIntersection",permalink:"/en/docs/sapi/preview/server/enumerations/BlockVolumeIntersection"},next:{title:"CompoundBlockVolumePositionRelativity",permalink:"/en/docs/sapi/preview/server/enumerations/CompoundBlockVolumePositionRelativity"}},d={},l=[{value:"Enumeration Members",id:"enumeration-members",level:2},{value:"Add",id:"add",level:3},{value:"Remarks",id:"remarks",level:4},{value:"Subtract",id:"subtract",level:3},{value:"Remarks",id:"remarks-1",level:4}];function a(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"enumeration-compoundblockvolumeaction",children:"Enumeration: CompoundBlockVolumeAction"}),"\n",(0,t.jsx)(n.p,{children:"The Action enum determines how the CompoundBlockVolume\nconsiders the associated CompoundBlockVolumeItem when\nperforming inside/outside calculations."}),"\n",(0,t.jsx)(n.h2,{id:"enumeration-members",children:"Enumeration Members"}),"\n",(0,t.jsx)(n.h3,{id:"add",children:"Add"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"Beta"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Add"}),": ",(0,t.jsx)(n.code,{children:"0"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"remarks",children:"Remarks"}),"\n",(0,t.jsx)(n.p,{children:"The associated BlockVolume is considered a positive space,\nand any intersection tests are considered hits"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"subtract",children:"Subtract"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"Beta"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Subtract"}),": ",(0,t.jsx)(n.code,{children:"1"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"remarks-1",children:"Remarks"}),"\n",(0,t.jsxs)(n.p,{children:["The associated BlockVolume is considered a negative or void\nspace, and any intersection tests are considered misses.\nUsing the Subtract action, it is possible to ",(0,t.jsx)(n.code,{children:"punch holes"}),"\nin block volumes so that any intersection tests may pass\nthrough such spaces"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>c});var t=o(96540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);