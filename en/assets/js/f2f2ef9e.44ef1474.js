"use strict";(self.webpackChunkbedrock_tech=self.webpackChunkbedrock_tech||[]).push([[50884],{15680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>u});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),o=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},g=function(e){var n=o(e.components);return a.createElement(s.Provider,{value:n},e.children)},y="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,g=p(e,["components","mdxType","originalType","parentName"]),y=o(t),m=r,u=y["".concat(s,".").concat(m)]||y[m]||d[m]||l;return t?a.createElement(u,i(i({ref:n},g),{},{components:t})):a.createElement(u,i({ref:n},g))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[y]="string"==typeof e?e:r,i[1]=p;for(var o=2;o<l;o++)i[o]=t[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},40243:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>o});var a=t(58168),r=(t(96540),t(15680));const l={id:"World",title:"Class: World",sidebar_label:"World",sidebar_position:0,custom_edit_url:null},i=void 0,p={unversionedId:"sapi/stable/server/classes/World",id:"sapi/stable/server/classes/World",title:"Class: World",description:"A class that wraps the state of a world - a set of",source:"@site/docs/sapi/stable/server/classes/World.md",sourceDirName:"sapi/stable/server/classes",slug:"/sapi/stable/server/classes/World",permalink:"/en/docs/sapi/stable/server/classes/World",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"World",title:"Class: World",sidebar_label:"World",sidebar_position:0,custom_edit_url:null},sidebar:"sapiStableSidebar",previous:{title:"WeatherChangeBeforeEventSignal",permalink:"/en/docs/sapi/stable/server/classes/WeatherChangeBeforeEventSignal"},next:{title:"WorldAfterEvents",permalink:"/en/docs/sapi/stable/server/classes/WorldAfterEvents"}},s={},o=[{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Properties",id:"properties",level:2},{value:"afterEvents",id:"afterevents",level:3},{value:"beforeEvents",id:"beforeevents",level:3},{value:"gameRules",id:"gamerules",level:3},{value:"scoreboard",id:"scoreboard",level:3},{value:"structureManager",id:"structuremanager",level:3},{value:"Methods",id:"methods",level:2},{value:"broadcastClientMessage",id:"broadcastclientmessage",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"clearDynamicProperties",id:"cleardynamicproperties",level:3},{value:"Returns",id:"returns-1",level:4},{value:"getAbsoluteTime",id:"getabsolutetime",level:3},{value:"Returns",id:"returns-2",level:4},{value:"getAllPlayers",id:"getallplayers",level:3},{value:"Returns",id:"returns-3",level:4},{value:"getDay",id:"getday",level:3},{value:"Returns",id:"returns-4",level:4},{value:"getDefaultSpawnLocation",id:"getdefaultspawnlocation",level:3},{value:"Returns",id:"returns-5",level:4},{value:"getDimension",id:"getdimension",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-6",level:4},{value:"getDynamicProperty",id:"getdynamicproperty",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-7",level:4},{value:"getDynamicPropertyIds",id:"getdynamicpropertyids",level:3},{value:"Returns",id:"returns-8",level:4},{value:"getDynamicPropertyTotalByteCount",id:"getdynamicpropertytotalbytecount",level:3},{value:"Returns",id:"returns-9",level:4},{value:"getEntity",id:"getentity",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-10",level:4},{value:"getMoonPhase",id:"getmoonphase",level:3},{value:"Returns",id:"returns-11",level:4},{value:"getPlayers",id:"getplayers",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-12",level:4},{value:"getTimeOfDay",id:"gettimeofday",level:3},{value:"Returns",id:"returns-13",level:4},{value:"playMusic",id:"playmusic",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-14",level:4},{value:"playSound",id:"playsound",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-15",level:4},{value:"queueMusic",id:"queuemusic",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-16",level:4},{value:"sendMessage",id:"sendmessage",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-17",level:4},{value:"setAbsoluteTime",id:"setabsolutetime",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-18",level:4},{value:"setDefaultSpawnLocation",id:"setdefaultspawnlocation",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-19",level:4},{value:"setDynamicProperty",id:"setdynamicproperty",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-20",level:4},{value:"setTimeOfDay",id:"settimeofday",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-21",level:4},{value:"stopMusic",id:"stopmusic",level:3},{value:"Returns",id:"returns-22",level:4}],g={toc:o},y="wrapper";function d(e){let{components:n,...t}=e;return(0,r.yg)(y,(0,a.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"A class that wraps the state of a world - a set of\ndimensions and the environment of Minecraft."),(0,r.yg)("h2",{id:"constructors"},"Constructors"),(0,r.yg)("h3",{id:"constructor"},"constructor"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"Private")," ",(0,r.yg)("strong",{parentName:"p"},"new World"),"()"),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)("h3",{id:"afterevents"},"afterEvents"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.yg)("strong",{parentName:"p"},"afterEvents"),": ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/WorldAfterEvents"},(0,r.yg)("inlineCode",{parentName:"a"},"WorldAfterEvents"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Contains a set of events that are applicable to the entirety\nof the world.  Event callbacks are called in a deferred\nmanner. Event callbacks are executed in read-write mode."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"beforeevents"},"beforeEvents"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.yg)("strong",{parentName:"p"},"beforeEvents"),": ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/WorldBeforeEvents"},(0,r.yg)("inlineCode",{parentName:"a"},"WorldBeforeEvents"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Contains a set of events that are applicable to the entirety\nof the world. Event callbacks are called immediately. Event\ncallbacks are executed in read-only mode."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"gamerules"},"gameRules"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.yg)("strong",{parentName:"p"},"gameRules"),": ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/GameRules"},(0,r.yg)("inlineCode",{parentName:"a"},"GameRules"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"The game rules that apply to the world."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"scoreboard"},"scoreboard"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.yg)("strong",{parentName:"p"},"scoreboard"),": ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/Scoreboard"},(0,r.yg)("inlineCode",{parentName:"a"},"Scoreboard"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns the general global scoreboard that applies to the\nworld."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"structuremanager"},"structureManager"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.yg)("strong",{parentName:"p"},"structureManager"),": ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/StructureManager"},(0,r.yg)("inlineCode",{parentName:"a"},"StructureManager"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns the manager for ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/Structure"},"Structure")," related APIs."),(0,r.yg)("h2",{id:"methods"},"Methods"),(0,r.yg)("h3",{id:"broadcastclientmessage"},"broadcastClientMessage"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"broadcastClientMessage"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"id"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"value"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"A method that is internal-only, used for broadcasting\nspecific messages between client and server."),(0,r.yg)("p",null,"This function can't be called in read-only mode."),(0,r.yg)("h4",{id:"parameters"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"id")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},"The message identifier.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"value")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},"The message.")))),(0,r.yg)("h4",{id:"returns"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"cleardynamicproperties"},"clearDynamicProperties"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"clearDynamicProperties"),"(): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Clears the set of dynamic properties declared for this\nbehavior pack within the world."),(0,r.yg)("h4",{id:"returns-1"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getabsolutetime"},"getAbsoluteTime"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getAbsoluteTime"),"(): ",(0,r.yg)("inlineCode",{parentName:"p"},"number")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns the absolute time since the start of the world."),(0,r.yg)("h4",{id:"returns-2"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"number")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getallplayers"},"getAllPlayers"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getAllPlayers"),"(): ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/Player"},(0,r.yg)("inlineCode",{parentName:"a"},"Player")),"[]"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns an array of all active players within the world."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"This function can throw errors."),(0,r.yg)("h4",{id:"returns-3"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/Player"},(0,r.yg)("inlineCode",{parentName:"a"},"Player")),"[]"),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getday"},"getDay"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getDay"),"(): ",(0,r.yg)("inlineCode",{parentName:"p"},"number")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns the current day."),(0,r.yg)("h4",{id:"returns-4"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"number")),(0,r.yg)("p",null,"The current day, determined by the world time divided by the\nnumber of ticks per day. New worlds start at day 0."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getdefaultspawnlocation"},"getDefaultSpawnLocation"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getDefaultSpawnLocation"),"(): ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/interfaces/Vector3"},(0,r.yg)("inlineCode",{parentName:"a"},"Vector3"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns the default Overworld spawn location."),(0,r.yg)("h4",{id:"returns-5"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/interfaces/Vector3"},(0,r.yg)("inlineCode",{parentName:"a"},"Vector3"))),(0,r.yg)("p",null,"The default Overworld spawn location. By default, the Y\ncoordinate is 32767, indicating a player's spawn height is\nnot fixed and will be determined by surrounding blocks."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getdimension"},"getDimension"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getDimension"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"dimensionId"),"): ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/Dimension"},(0,r.yg)("inlineCode",{parentName:"a"},"Dimension"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns a dimension object."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"Throws if the given dimension name is invalid"),(0,r.yg)("h4",{id:"parameters-1"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"dimensionId")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},'The name of the dimension. For example, "overworld", "nether" or "the_end".')))),(0,r.yg)("h4",{id:"returns-6"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/Dimension"},(0,r.yg)("inlineCode",{parentName:"a"},"Dimension"))),(0,r.yg)("p",null,"The requested dimension"),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getdynamicproperty"},"getDynamicProperty"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getDynamicProperty"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"identifier"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"string")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"p"},"number")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"p"},"boolean")," ","|"," ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/interfaces/Vector3"},(0,r.yg)("inlineCode",{parentName:"a"},"Vector3"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns a property value."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"Throws if the given dynamic property identifier is not\ndefined."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"incrementDynamicProperty.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import * as mc from '@minecraft/server';\n\nfunction incrementProperty(propertyName: string): boolean {\n    let number = mc.world.getDynamicProperty(propertyName);\n\n    console.warn('Current value is: ' + number);\n\n    if (number === undefined) {\n        number = 0;\n    }\n\n    if (typeof number !== 'number') {\n        console.warn('Number is of an unexpected type.');\n        return false;\n    }\n\n    mc.world.setDynamicProperty(propertyName, number + 1);\n    return true;\n}\n\nincrementProperty('samplelibrary:number');\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"incrementDynamicPropertyInJsonBlob.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import * as mc from '@minecraft/server';\n\nfunction updateWorldProperty(propertyName: string): boolean {\n    let paintStr = mc.world.getDynamicProperty(propertyName);\n    let paint: { color: string; intensity: number } | undefined = undefined;\n\n    console.log('Current value is: ' + paintStr);\n\n    if (paintStr === undefined) {\n        paint = {\n            color: 'purple',\n            intensity: 0,\n        };\n    } else {\n        if (typeof paintStr !== 'string') {\n            console.warn('Paint is of an unexpected type.');\n            return false;\n        }\n\n        try {\n            paint = JSON.parse(paintStr);\n        } catch (e) {\n            console.warn('Error parsing serialized struct.');\n            return false;\n        }\n    }\n\n    if (!paint) {\n        console.warn('Error parsing serialized struct.');\n        return false;\n    }\n\n    paint.intensity++;\n    paintStr = JSON.stringify(paint); // be very careful to ensure your serialized JSON str cannot exceed limits\n    mc.world.setDynamicProperty(propertyName, paintStr);\n\n    return true;\n}\n\nupdateWorldProperty('samplelibrary:longerjson');\n")),(0,r.yg)("h4",{id:"parameters-2"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"identifier")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},"The property identifier.")))),(0,r.yg)("h4",{id:"returns-7"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"p"},"number")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"p"},"boolean")," ","|"," ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/interfaces/Vector3"},(0,r.yg)("inlineCode",{parentName:"a"},"Vector3"))),(0,r.yg)("p",null,"Returns the value for the property, or undefined if the\nproperty has not been set."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getdynamicpropertyids"},"getDynamicPropertyIds"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getDynamicPropertyIds"),"(): ",(0,r.yg)("inlineCode",{parentName:"p"},"string"),"[]"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Gets a set of dynamic property identifiers that have been\nset in this world."),(0,r.yg)("h4",{id:"returns-8"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string"),"[]"),(0,r.yg)("p",null,"A string array of active dynamic property identifiers."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getdynamicpropertytotalbytecount"},"getDynamicPropertyTotalByteCount"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getDynamicPropertyTotalByteCount"),"(): ",(0,r.yg)("inlineCode",{parentName:"p"},"number")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Gets the total byte count of dynamic properties. This could\npotentially be used for your own analytics to ensure you're\nnot storing gigantic sets of dynamic properties."),(0,r.yg)("h4",{id:"returns-9"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"number")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getentity"},"getEntity"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getEntity"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"id"),"): ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/Entity"},(0,r.yg)("inlineCode",{parentName:"a"},"Entity"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns an entity based on the provided id."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"Throws if the given entity id is invalid."),(0,r.yg)("h4",{id:"parameters-3"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"id")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},"The id of the entity.")))),(0,r.yg)("h4",{id:"returns-10"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/Entity"},(0,r.yg)("inlineCode",{parentName:"a"},"Entity"))),(0,r.yg)("p",null,"The requested entity object."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getmoonphase"},"getMoonPhase"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getMoonPhase"),"(): ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/enums/MoonPhase"},(0,r.yg)("inlineCode",{parentName:"a"},"MoonPhase"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns the MoonPhase for the current time."),(0,r.yg)("h4",{id:"returns-11"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/enums/MoonPhase"},(0,r.yg)("inlineCode",{parentName:"a"},"MoonPhase"))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"getplayers"},"getPlayers"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getPlayers"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"options?"),"): ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/Player"},(0,r.yg)("inlineCode",{parentName:"a"},"Player")),"[]"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns a set of players based on a set of conditions\ndefined via the EntityQueryOptions set of filter criteria."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"Throws if the provided EntityQueryOptions are invalid."),(0,r.yg)("h4",{id:"parameters-4"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"options?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/en/docs/sapi/stable/server/interfaces/EntityQueryOptions"},(0,r.yg)("inlineCode",{parentName:"a"},"EntityQueryOptions"))),(0,r.yg)("td",{parentName:"tr",align:"left"},"Additional options that can be used to filter the set of players returned.")))),(0,r.yg)("h4",{id:"returns-12"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/Player"},(0,r.yg)("inlineCode",{parentName:"a"},"Player")),"[]"),(0,r.yg)("p",null,"A player array."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"gettimeofday"},"getTimeOfDay"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getTimeOfDay"),"(): ",(0,r.yg)("inlineCode",{parentName:"p"},"number")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns the time of day."),(0,r.yg)("h4",{id:"returns-13"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"number")),(0,r.yg)("p",null,"The time of day, in ticks, between 0 and 24000."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"playmusic"},"playMusic"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"playMusic"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"trackId"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"musicOptions?"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Plays a particular music track for all players."),(0,r.yg)("p",null,"This function can't be called in read-only mode."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"This function can throw errors."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"playMusicAndSound.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { world, MusicOptions, WorldSoundOptions, PlayerSoundOptions, Vector3 } from '@minecraft/server';\n\nconst players = world.getPlayers();\nconst targetLocation: Vector3 = {\n    x: 0,\n    y: 0,\n    z: 0,\n};\n\nconst musicOptions: MusicOptions = {\n    fade: 0.5,\n    loop: true,\n    volume: 1.0,\n};\nworld.playMusic('music.menu', musicOptions);\n\nconst worldSoundOptions: WorldSoundOptions = {\n    pitch: 0.5,\n    volume: 4.0,\n};\nworld.playSound('ambient.weather.thunder', targetLocation, worldSoundOptions);\n\nconst playerSoundOptions: PlayerSoundOptions = {\n    pitch: 1.0,\n    volume: 1.0,\n};\n\nplayers[0].playSound('bucket.fill_water', playerSoundOptions);\n")),(0,r.yg)("h4",{id:"parameters-5"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"trackId")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"musicOptions?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/en/docs/sapi/stable/server/interfaces/MusicOptions"},(0,r.yg)("inlineCode",{parentName:"a"},"MusicOptions")))))),(0,r.yg)("h4",{id:"returns-14"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"playsound"},"playSound"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"playSound"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"soundId"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"location"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"soundOptions?"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Plays a sound for all players."),(0,r.yg)("p",null,"This function can't be called in read-only mode."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"An error will be thrown if volume is less than 0.0.\nAn error will be thrown if fade is less than 0.0.\nAn error will be thrown if pitch is less than 0.01.\nAn error will be thrown if volume is less than 0.0."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"playMusicAndSound.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { world, MusicOptions, WorldSoundOptions, PlayerSoundOptions, Vector3 } from '@minecraft/server';\n\nconst players = world.getPlayers();\nconst targetLocation: Vector3 = {\n    x: 0,\n    y: 0,\n    z: 0,\n};\n\nconst musicOptions: MusicOptions = {\n    fade: 0.5,\n    loop: true,\n    volume: 1.0,\n};\nworld.playMusic('music.menu', musicOptions);\n\nconst worldSoundOptions: WorldSoundOptions = {\n    pitch: 0.5,\n    volume: 4.0,\n};\nworld.playSound('ambient.weather.thunder', targetLocation, worldSoundOptions);\n\nconst playerSoundOptions: PlayerSoundOptions = {\n    pitch: 1.0,\n    volume: 1.0,\n};\n\nplayers[0].playSound('bucket.fill_water', playerSoundOptions);\n")),(0,r.yg)("h4",{id:"parameters-6"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"soundId")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"location")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/en/docs/sapi/stable/server/interfaces/Vector3"},(0,r.yg)("inlineCode",{parentName:"a"},"Vector3")))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"soundOptions?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/en/docs/sapi/stable/server/interfaces/WorldSoundOptions"},(0,r.yg)("inlineCode",{parentName:"a"},"WorldSoundOptions")))))),(0,r.yg)("h4",{id:"returns-15"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"queuemusic"},"queueMusic"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"queueMusic"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"trackId"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"musicOptions?"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Queues an additional music track for players. If a track is\nnot playing, a music track will play."),(0,r.yg)("p",null,"This function can't be called in read-only mode."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"An error will be thrown if volume is less than 0.0.\nAn error will be thrown if fade is less than 0.0."),(0,r.yg)("h4",{id:"parameters-7"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"trackId")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},"Identifier of the music track to play.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"musicOptions?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/en/docs/sapi/stable/server/interfaces/MusicOptions"},(0,r.yg)("inlineCode",{parentName:"a"},"MusicOptions"))),(0,r.yg)("td",{parentName:"tr",align:"left"},"Additional options for the music track.")))),(0,r.yg)("h4",{id:"returns-16"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"sendmessage"},"sendMessage"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"sendMessage"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"message"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Sends a message to all players."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"This method can throw if the provided ",(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/interfaces/RawMessage"},"RawMessage")," is\nin an invalid format. For example, if an empty ",(0,r.yg)("inlineCode",{parentName:"p"},"name")," string\nis provided to ",(0,r.yg)("inlineCode",{parentName:"p"},"score"),"."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"nestedTranslation.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { world } from '@minecraft/server';\n\n// Displays \"Apple or Coal\"\nconst rawMessage = {\n    translate: 'accessibility.list.or.two',\n    with: { rawtext: [{ translate: 'item.apple.name' }, { translate: 'item.coal.name' }] },\n};\nworld.sendMessage(rawMessage);\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"scoreWildcard.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { world } from '@minecraft/server';\n\n// Displays the player's score for objective \"obj\". Each player will see their own score.\nconst rawMessage = { score: { name: '*', objective: 'obj' } };\nworld.sendMessage(rawMessage);\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"simpleString.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { world } from '@minecraft/server';\n\n// Displays \"Hello, world!\"\nworld.sendMessage('Hello, world!');\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"translation.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { world } from '@minecraft/server';\n\n// Displays \"First or Second\"\nconst rawMessage = { translate: 'accessibility.list.or.two', with: ['First', 'Second'] };\nworld.sendMessage(rawMessage);\n")),(0,r.yg)("h4",{id:"parameters-8"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"message")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.yg)("a",{parentName:"td",href:"/en/docs/sapi/stable/server/interfaces/RawMessage"},(0,r.yg)("inlineCode",{parentName:"a"},"RawMessage"))," ","|"," (",(0,r.yg)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.yg)("a",{parentName:"td",href:"/en/docs/sapi/stable/server/interfaces/RawMessage"},(0,r.yg)("inlineCode",{parentName:"a"},"RawMessage")),")[]"),(0,r.yg)("td",{parentName:"tr",align:"left"},"The message to be displayed.")))),(0,r.yg)("h4",{id:"returns-17"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"setabsolutetime"},"setAbsoluteTime"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"setAbsoluteTime"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"absoluteTime"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Sets the world time."),(0,r.yg)("p",null,"This function can't be called in read-only mode."),(0,r.yg)("h4",{id:"parameters-9"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"absoluteTime")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"number")),(0,r.yg)("td",{parentName:"tr",align:"left"},"The world time, in ticks.")))),(0,r.yg)("h4",{id:"returns-18"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"setdefaultspawnlocation"},"setDefaultSpawnLocation"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"setDefaultSpawnLocation"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"spawnLocation"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Sets a default spawn location for all players."),(0,r.yg)("p",null,"This function can't be called in read-only mode."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"Throws if the provided spawn location is out of bounds."),(0,r.yg)("p",null,"Error"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/en/docs/sapi/stable/server/classes/LocationOutOfWorldBoundariesError"},"LocationOutOfWorldBoundariesError")),(0,r.yg)("h4",{id:"parameters-10"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"spawnLocation")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/en/docs/sapi/stable/server/interfaces/Vector3"},(0,r.yg)("inlineCode",{parentName:"a"},"Vector3"))),(0,r.yg)("td",{parentName:"tr",align:"left"},"Location of the spawn point. Note that this is assumed to be within the overworld dimension.")))),(0,r.yg)("h4",{id:"returns-19"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"setdynamicproperty"},"setDynamicProperty"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"setDynamicProperty"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"identifier"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"value?"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Sets a specified property to a value."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"Throws if the given dynamic property identifier is not\ndefined."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"incrementDynamicProperty.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import * as mc from '@minecraft/server';\n\nfunction incrementProperty(propertyName: string): boolean {\n    let number = mc.world.getDynamicProperty(propertyName);\n\n    console.warn('Current value is: ' + number);\n\n    if (number === undefined) {\n        number = 0;\n    }\n\n    if (typeof number !== 'number') {\n        console.warn('Number is of an unexpected type.');\n        return false;\n    }\n\n    mc.world.setDynamicProperty(propertyName, number + 1);\n    return true;\n}\n\nincrementProperty('samplelibrary:number');\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"incrementDynamicPropertyInJsonBlob.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import * as mc from '@minecraft/server';\n\nfunction updateWorldProperty(propertyName: string): boolean {\n    let paintStr = mc.world.getDynamicProperty(propertyName);\n    let paint: { color: string; intensity: number } | undefined = undefined;\n\n    console.log('Current value is: ' + paintStr);\n\n    if (paintStr === undefined) {\n        paint = {\n            color: 'purple',\n            intensity: 0,\n        };\n    } else {\n        if (typeof paintStr !== 'string') {\n            console.warn('Paint is of an unexpected type.');\n            return false;\n        }\n\n        try {\n            paint = JSON.parse(paintStr);\n        } catch (e) {\n            console.warn('Error parsing serialized struct.');\n            return false;\n        }\n    }\n\n    if (!paint) {\n        console.warn('Error parsing serialized struct.');\n        return false;\n    }\n\n    paint.intensity++;\n    paintStr = JSON.stringify(paint); // be very careful to ensure your serialized JSON str cannot exceed limits\n    mc.world.setDynamicProperty(propertyName, paintStr);\n\n    return true;\n}\n\nupdateWorldProperty('samplelibrary:longerjson');\n")),(0,r.yg)("h4",{id:"parameters-11"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"identifier")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:"left"},"The property identifier.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"value?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,r.yg)("inlineCode",{parentName:"td"},"boolean")," ","|"," ",(0,r.yg)("a",{parentName:"td",href:"/en/docs/sapi/stable/server/interfaces/Vector3"},(0,r.yg)("inlineCode",{parentName:"a"},"Vector3"))),(0,r.yg)("td",{parentName:"tr",align:"left"},"Data value of the property to set.")))),(0,r.yg)("h4",{id:"returns-20"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"settimeofday"},"setTimeOfDay"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"setTimeOfDay"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"timeOfDay"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Sets the time of day."),(0,r.yg)("p",null,"This function can't be called in read-only mode."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"Throws if the provided time of day is not within the valid\nrange."),(0,r.yg)("h4",{id:"parameters-12"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"timeOfDay")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"number")),(0,r.yg)("td",{parentName:"tr",align:"left"},"The time of day, in ticks, between 0 and 24000.")))),(0,r.yg)("h4",{id:"returns-21"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"stopmusic"},"stopMusic"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"stopMusic"),"(): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Stops any music tracks from playing."),(0,r.yg)("p",null,"This function can't be called in read-only mode."),(0,r.yg)("h4",{id:"returns-22"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")))}d.isMDXComponent=!0}}]);