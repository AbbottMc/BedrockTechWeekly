"use strict";(self.webpackChunkbedrock_tech=self.webpackChunkbedrock_tech||[]).push([[5053],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,k=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return n?o.createElement(k,a(a({ref:t},u),{},{components:n})):o.createElement(k,a({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},75617:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const i={id:"CompoundBlockVolumeAction",title:"Enumeration: CompoundBlockVolumeAction",sidebar_label:"CompoundBlockVolumeAction",sidebar_position:0,custom_edit_url:null},a=void 0,l={unversionedId:"sapi/preview/server/enums/CompoundBlockVolumeAction",id:"sapi/preview/server/enums/CompoundBlockVolumeAction",title:"Enumeration: CompoundBlockVolumeAction",description:"The Action enum determines how the CompoundBlockVolume",source:"@site/docs/sapi/preview/server/enums/CompoundBlockVolumeAction.md",sourceDirName:"sapi/preview/server/enums",slug:"/sapi/preview/server/enums/CompoundBlockVolumeAction",permalink:"/en/docs/sapi/preview/server/enums/CompoundBlockVolumeAction",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"CompoundBlockVolumeAction",title:"Enumeration: CompoundBlockVolumeAction",sidebar_label:"CompoundBlockVolumeAction",sidebar_position:0,custom_edit_url:null},sidebar:"sapiPreviewSidebar",previous:{title:"BlockVolumeIntersection",permalink:"/en/docs/sapi/preview/server/enums/BlockVolumeIntersection"},next:{title:"CompoundBlockVolumePositionRelativity",permalink:"/en/docs/sapi/preview/server/enums/CompoundBlockVolumePositionRelativity"}},s={},c=[{value:"Enumeration Members",id:"enumeration-members",level:2},{value:"Add",id:"add",level:3},{value:"Subtract",id:"subtract",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Action enum determines how the CompoundBlockVolume\nconsiders the associated CompoundBlockVolumeItem when\nperforming inside/outside calculations."),(0,r.kt)("h2",{id:"enumeration-members"},"Enumeration Members"),(0,r.kt)("h3",{id:"add"},"Add"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"Add")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"0")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.kt)("p",null,"The associated BlockVolume is considered a positive space,\nand any intersection tests are considered hits"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"subtract"},"Subtract"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"Subtract")," = ",(0,r.kt)("inlineCode",{parentName:"p"},"1")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.kt)("p",null,"The associated BlockVolume is considered a negative or void\nspace, and any intersection tests are considered misses.\nUsing the Subtract action, it is possible to ",(0,r.kt)("inlineCode",{parentName:"p"},"punch holes"),"\nin block volumes so that any intersection tests may pass\nthrough such spaces"))}p.isMDXComponent=!0}}]);