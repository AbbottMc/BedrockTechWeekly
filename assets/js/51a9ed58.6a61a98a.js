"use strict";(self.webpackChunkbedrock_tech=self.webpackChunkbedrock_tech||[]).push([[11331],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var o=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),d=r,y=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return t?o.createElement(y,a(a({ref:n},u),{},{components:t})):o.createElement(y,a({ref:n},u))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},20631:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=t(58168),r=(t(96540),t(15680));const i={id:"CompoundBlockVolumeAction",title:"Enumeration: CompoundBlockVolumeAction",sidebar_label:"CompoundBlockVolumeAction",sidebar_position:0,custom_edit_url:null},a=void 0,l={unversionedId:"sapi/stable/server/enums/CompoundBlockVolumeAction",id:"sapi/stable/server/enums/CompoundBlockVolumeAction",title:"Enumeration: CompoundBlockVolumeAction",description:"The Action enum determines how the CompoundBlockVolume",source:"@site/docs/sapi/stable/server/enums/CompoundBlockVolumeAction.md",sourceDirName:"sapi/stable/server/enums",slug:"/sapi/stable/server/enums/CompoundBlockVolumeAction",permalink:"/docs/sapi/stable/server/enums/CompoundBlockVolumeAction",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"CompoundBlockVolumeAction",title:"Enumeration: CompoundBlockVolumeAction",sidebar_label:"CompoundBlockVolumeAction",sidebar_position:0,custom_edit_url:null},sidebar:"sapiStableSidebar",previous:{title:"BlockVolumeIntersection",permalink:"/docs/sapi/stable/server/enums/BlockVolumeIntersection"},next:{title:"CompoundBlockVolumePositionRelativity",permalink:"/docs/sapi/stable/server/enums/CompoundBlockVolumePositionRelativity"}},s={},c=[{value:"Enumeration Members",id:"enumeration-members",level:2},{value:"Add",id:"add",level:3},{value:"Subtract",id:"subtract",level:3}],u={toc:c},p="wrapper";function m(e){let{components:n,...t}=e;return(0,r.yg)(p,(0,o.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"The Action enum determines how the CompoundBlockVolume\nconsiders the associated CompoundBlockVolumeItem when\nperforming inside/outside calculations."),(0,r.yg)("h2",{id:"enumeration-members"},"Enumeration Members"),(0,r.yg)("h3",{id:"add"},"Add"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("strong",{parentName:"p"},"Add")," = ",(0,r.yg)("inlineCode",{parentName:"p"},"0")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"The associated BlockVolume is considered a positive space,\nand any intersection tests are considered hits"),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"subtract"},"Subtract"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("strong",{parentName:"p"},"Subtract")," = ",(0,r.yg)("inlineCode",{parentName:"p"},"1")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"The associated BlockVolume is considered a negative or void\nspace, and any intersection tests are considered misses.\nUsing the Subtract action, it is possible to ",(0,r.yg)("inlineCode",{parentName:"p"},"punch holes"),"\nin block volumes so that any intersection tests may pass\nthrough such spaces"))}m.isMDXComponent=!0}}]);