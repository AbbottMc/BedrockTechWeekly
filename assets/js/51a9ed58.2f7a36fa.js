"use strict";(self.webpackChunkbedrock_tech=self.webpackChunkbedrock_tech||[]).push([[11331],{49163:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>r,default:()=>a,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var t=n(74848),s=n(28453);const i={id:"CompoundBlockVolumeAction",title:"Enumeration: CompoundBlockVolumeAction",sidebar_label:"CompoundBlockVolumeAction",sidebar_position:0,custom_edit_url:null},r=void 0,c={id:"sapi/stable/server/enums/CompoundBlockVolumeAction",title:"Enumeration: CompoundBlockVolumeAction",description:"The Action enum determines how the CompoundBlockVolume",source:"@site/docs/sapi/stable/server/enums/CompoundBlockVolumeAction.md",sourceDirName:"sapi/stable/server/enums",slug:"/sapi/stable/server/enums/CompoundBlockVolumeAction",permalink:"/docs/sapi/stable/server/enums/CompoundBlockVolumeAction",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"CompoundBlockVolumeAction",title:"Enumeration: CompoundBlockVolumeAction",sidebar_label:"CompoundBlockVolumeAction",sidebar_position:0,custom_edit_url:null},sidebar:"sapiStableSidebar",previous:{title:"BlockVolumeIntersection",permalink:"/docs/sapi/stable/server/enums/BlockVolumeIntersection"},next:{title:"CompoundBlockVolumePositionRelativity",permalink:"/docs/sapi/stable/server/enums/CompoundBlockVolumePositionRelativity"}},l={},d=[{value:"Enumeration Members",id:"enumeration-members",level:2},{value:"Add",id:"add",level:3},{value:"Subtract",id:"subtract",level:3}];function u(e){const o={code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.p,{children:"The Action enum determines how the CompoundBlockVolume\nconsiders the associated CompoundBlockVolumeItem when\nperforming inside/outside calculations."}),"\n",(0,t.jsx)(o.h2,{id:"enumeration-members",children:"Enumeration Members"}),"\n",(0,t.jsx)(o.h3,{id:"add",children:"Add"}),"\n",(0,t.jsxs)(o.p,{children:["\u2022 ",(0,t.jsx)(o.strong,{children:"Add"})," = ",(0,t.jsx)(o.code,{children:"0"})]}),"\n",(0,t.jsx)(o.p,{children:(0,t.jsx)(o.strong,{children:(0,t.jsx)(o.code,{children:"Remarks"})})}),"\n",(0,t.jsx)(o.p,{children:"The associated BlockVolume is considered a positive space,\nand any intersection tests are considered hits"}),"\n",(0,t.jsx)(o.hr,{}),"\n",(0,t.jsx)(o.h3,{id:"subtract",children:"Subtract"}),"\n",(0,t.jsxs)(o.p,{children:["\u2022 ",(0,t.jsx)(o.strong,{children:"Subtract"})," = ",(0,t.jsx)(o.code,{children:"1"})]}),"\n",(0,t.jsx)(o.p,{children:(0,t.jsx)(o.strong,{children:(0,t.jsx)(o.code,{children:"Remarks"})})}),"\n",(0,t.jsxs)(o.p,{children:["The associated BlockVolume is considered a negative or void\nspace, and any intersection tests are considered misses.\nUsing the Subtract action, it is possible to ",(0,t.jsx)(o.code,{children:"punch holes"}),"\nin block volumes so that any intersection tests may pass\nthrough such spaces"]})]})}function a(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},28453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>c});var t=n(96540);const s={},i=t.createContext(s);function r(e){const o=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:o},e.children)}}}]);