"use strict";(self.webpackChunkbedrock_tech=self.webpackChunkbedrock_tech||[]).push([[15249],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>k});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(r),c=n,k=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return r?a.createElement(k,l(l({ref:t},d),{},{components:r})):a.createElement(k,l({ref:t},d))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:n,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},67379:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=r(87462),n=(r(67294),r(3905));const i={id:"StructureManager",title:"Class: StructureManager",sidebar_label:"StructureManager",sidebar_position:0,custom_edit_url:null},l=void 0,o={unversionedId:"sapi/preview/server/classes/StructureManager",id:"sapi/preview/server/classes/StructureManager",title:"Class: StructureManager",description:"Manager for Structure related APIs. Includes APIs for",source:"@site/docs/sapi/preview/server/classes/StructureManager.md",sourceDirName:"sapi/preview/server/classes",slug:"/sapi/preview/server/classes/StructureManager",permalink:"/docs/sapi/preview/server/classes/StructureManager",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"StructureManager",title:"Class: StructureManager",sidebar_label:"StructureManager",sidebar_position:0,custom_edit_url:null},sidebar:"sapiPreviewSidebar",previous:{title:"Structure",permalink:"/docs/sapi/preview/server/classes/Structure"},next:{title:"System",permalink:"/docs/sapi/preview/server/classes/System"}},s={},p=[{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Methods",id:"methods",level:2},{value:"createEmpty",id:"createempty",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"createFromWorld",id:"createfromworld",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"delete",id:"delete",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"get",id:"get",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"getWorldStructureIds",id:"getworldstructureids",level:3},{value:"Returns",id:"returns-4",level:4},{value:"place",id:"place",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4}],d={toc:p};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Manager for Structure related APIs. Includes APIs for\ncreating, getting, placing and deleting Structures."),(0,n.kt)("h2",{id:"constructors"},"Constructors"),(0,n.kt)("h3",{id:"constructor"},"constructor"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("inlineCode",{parentName:"p"},"Private")," ",(0,n.kt)("strong",{parentName:"p"},"new StructureManager"),"()"),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"createempty"},"createEmpty"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"createEmpty"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"identifier"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"size"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"saveMode?"),"): ",(0,n.kt)("a",{parentName:"p",href:"/docs/sapi/preview/server/classes/Structure"},(0,n.kt)("inlineCode",{parentName:"a"},"Structure"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Remarks"))),(0,n.kt)("p",null,"Creates an empty Structure in memory. Use ",(0,n.kt)("a",{parentName:"p",href:"/docs/sapi/preview/server/classes/Structure#setblockpermutation"},"setBlockPermutation")," to populate the structure\nwith blocks and save changes with ",(0,n.kt)("a",{parentName:"p",href:"/docs/sapi/preview/server/modules"},"@minecraft/server.Structure.save"),"."),(0,n.kt)("p",null,"This function can't be called in read-only mode."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Throws"))),(0,n.kt)("p",null,"Throws if the identifier is invalid. A valid identifier must\ninclude a namespace and must be unique."),(0,n.kt)("p",null,"minecraftcommon.EngineError"),(0,n.kt)("p",null,"minecraftcommon.InvalidArgumentError"),(0,n.kt)("h4",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"identifier")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The name of the structure. A valid identifier must include a namespace and must be unique.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"size")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/docs/sapi/preview/server/interfaces/Vector3"},(0,n.kt)("inlineCode",{parentName:"a"},"Vector3"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The size of the structure. For example, to create a single block structure the size should be {x:1, y:1, z:1}.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"saveMode?")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/docs/sapi/preview/server/enums/StructureSaveMode"},(0,n.kt)("inlineCode",{parentName:"a"},"StructureSaveMode"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"How the Structure should be saved upon creation. Defaults to StructureSaveMode.Memory.")))),(0,n.kt)("h4",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/sapi/preview/server/classes/Structure"},(0,n.kt)("inlineCode",{parentName:"a"},"Structure"))),(0,n.kt)("p",null,"Returns the newly created Structure."),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"createfromworld"},"createFromWorld"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"createFromWorld"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"identifier"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"dimension"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"from"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"to"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"options?"),"): ",(0,n.kt)("a",{parentName:"p",href:"/docs/sapi/preview/server/classes/Structure"},(0,n.kt)("inlineCode",{parentName:"a"},"Structure"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Remarks"))),(0,n.kt)("p",null,"Creates a new Structure from blocks in the world. This is\nfunctionally equivalent to the /structure save command."),(0,n.kt)("p",null,"This function can't be called in read-only mode."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Throws"))),(0,n.kt)("p",null,"Throws if the identifier is invalid. A valid identifier must\ninclude a namespace and must be unique.\nThrows if the structure bounds exceed the maximum size.\nThrows if the structure bounds contains blocks outside the\nworld bounds."),(0,n.kt)("p",null,"minecraftcommon.InvalidArgumentError"),(0,n.kt)("h4",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"identifier")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The name of the structure. A valid identifier must include a namespace and must be unique.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"dimension")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/docs/sapi/preview/server/classes/Dimension"},(0,n.kt)("inlineCode",{parentName:"a"},"Dimension"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The dimension where the blocks should be read from.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"from")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/docs/sapi/preview/server/interfaces/Vector3"},(0,n.kt)("inlineCode",{parentName:"a"},"Vector3"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"-")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"to")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/docs/sapi/preview/server/interfaces/Vector3"},(0,n.kt)("inlineCode",{parentName:"a"},"Vector3"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"-")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"options?")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/docs/sapi/preview/server/interfaces/StructureCreateOptions"},(0,n.kt)("inlineCode",{parentName:"a"},"StructureCreateOptions"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Additional options for creating a structure from the world.")))),(0,n.kt)("h4",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/sapi/preview/server/classes/Structure"},(0,n.kt)("inlineCode",{parentName:"a"},"Structure"))),(0,n.kt)("p",null,"Returns the newly created Structure."),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"delete"},"delete"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"delete"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"structure"),"): ",(0,n.kt)("inlineCode",{parentName:"p"},"boolean")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Remarks"))),(0,n.kt)("p",null,"Deletes a structure from memory and from the world if it\nexists."),(0,n.kt)("p",null,"This function can't be called in read-only mode."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Throws"))),(0,n.kt)("p",null,"Throws if a structure cannot be removed. For example, a\nstructure loaded from a Behavior Pack."),(0,n.kt)("p",null,"minecraftcommon.InvalidArgumentError"),(0,n.kt)("h4",{id:"parameters-2"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"structure")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,n.kt)("a",{parentName:"td",href:"/docs/sapi/preview/server/classes/Structure"},(0,n.kt)("inlineCode",{parentName:"a"},"Structure"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The structure identifier or Structure object that should be deleted. Note, a Structure object will become invalid after it is deleted.")))),(0,n.kt)("h4",{id:"returns-2"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"Returns whether the structure was removed."),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"get"},"get"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"get"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"identifier"),"): ",(0,n.kt)("a",{parentName:"p",href:"/docs/sapi/preview/server/classes/Structure"},(0,n.kt)("inlineCode",{parentName:"a"},"Structure"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Remarks"))),(0,n.kt)("p",null,"Gets a Structure that is saved to memory or the world."),(0,n.kt)("p",null,"This function can't be called in read-only mode."),(0,n.kt)("h4",{id:"parameters-3"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"identifier")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The name of the structure to get.")))),(0,n.kt)("h4",{id:"returns-3"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/sapi/preview/server/classes/Structure"},(0,n.kt)("inlineCode",{parentName:"a"},"Structure"))),(0,n.kt)("p",null,"Returns a Structure if it exists, otherwise undefined."),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"getworldstructureids"},"getWorldStructureIds"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"getWorldStructureIds"),"(): ",(0,n.kt)("inlineCode",{parentName:"p"},"string"),"[]"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Remarks"))),(0,n.kt)("p",null,"This function can't be called in read-only mode."),(0,n.kt)("h4",{id:"returns-4"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"string"),"[]"),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"place"},"place"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"place"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"structure"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"dimension"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"location"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"options?"),"): ",(0,n.kt)("inlineCode",{parentName:"p"},"void")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Remarks"))),(0,n.kt)("p",null,"Places a structure in the world. Structures placed in\nunloaded chunks will be queued for loading."),(0,n.kt)("p",null,"This function can't be called in read-only mode."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"Throws"))),(0,n.kt)("p",null,"Throws if the integrity value is outside of the range ","[0,1]","\nThrows if the integrity seed is invalid.\nThrows if the placement location contains blocks that are\noutside the world bounds."),(0,n.kt)("p",null,"minecraftcommon.ArgumentOutOfBoundsError"),(0,n.kt)("p",null,"minecraftcommon.InvalidArgumentError"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/sapi/preview/server/classes/InvalidStructureError"},"InvalidStructureError")),(0,n.kt)("h4",{id:"parameters-4"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"structure")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,n.kt)("a",{parentName:"td",href:"/docs/sapi/preview/server/classes/Structure"},(0,n.kt)("inlineCode",{parentName:"a"},"Structure"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The structure's identifier or a Structure object.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"dimension")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/docs/sapi/preview/server/classes/Dimension"},(0,n.kt)("inlineCode",{parentName:"a"},"Dimension"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The dimension where the Structure should be placed.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"location")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/docs/sapi/preview/server/interfaces/Vector3"},(0,n.kt)("inlineCode",{parentName:"a"},"Vector3"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The location within the dimension where the Structure should be placed.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"options?")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/docs/sapi/preview/server/interfaces/StructurePlaceOptions"},(0,n.kt)("inlineCode",{parentName:"a"},"StructurePlaceOptions"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"Additional options for Structure placement.")))),(0,n.kt)("h4",{id:"returns-5"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"void")))}u.isMDXComponent=!0}}]);