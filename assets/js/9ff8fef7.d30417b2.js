"use strict";(self.webpackChunkbedrock_tech=self.webpackChunkbedrock_tech||[]).push([[98438],{15680:(e,t,r)=>{r.d(t,{xA:()=>m,yg:()=>g});var a=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),p=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(r),d=n,g=u["".concat(c,".").concat(d)]||u[d]||y[d]||l;return r?a.createElement(g,o(o({ref:t},m),{},{components:r})):a.createElement(g,o({ref:t},m))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,o=new Array(l);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:n,o[1]=i;for(var p=2;p<l;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},83735:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>y,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=r(58168),n=(r(96540),r(15680));const l={},o=void 0,i={unversionedId:"changelog_source/preview/1.19/60/25/tech_sapi_stable",id:"changelog_source/preview/1.19/60/25/tech_sapi_stable",title:"tech_sapi_stable",description:"-   Entity",source:"@site/docs/changelog_source/preview/1.19/60/25/tech_sapi_stable.md",sourceDirName:"changelog_source/preview/1.19/60/25",slug:"/changelog_source/preview/1.19/60/25/tech_sapi_stable",permalink:"/docs/changelog_source/preview/1.19/60/25/tech_sapi_stable",draft:!1,editUrl:"https://github.com/AbbottMc/BedrockTechWeekly/tree/master/docs/changelog_source/preview/1.19/60/25/tech_sapi_stable.md",tags:[],version:"current",frontMatter:{}},c={},p=[],m={toc:p},u="wrapper";function y(e){let{components:t,...r}=e;return(0,n.yg)(u,(0,a.A)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Entity",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Fixed a bug where the ",(0,n.yg)("em",{parentName:"li"},"getEffect")," method could return an invalid Effect (and another case where an Effect could become invalid after a new Effect was added)  "))),(0,n.yg)("li",{parentName:"ul"},"EntityHurtEvent",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Added read-only property ",(0,n.yg)("em",{parentName:"li"},"damageSource: EntityDamageSource")," - Gets information about the damage source"),(0,n.yg)("li",{parentName:"ul"},"EntityDamageSource",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Added property ",(0,n.yg)("em",{parentName:"li"},"cause: EntityDamageCause")," - Gets the damage cause"),(0,n.yg)("li",{parentName:"ul"},"Added property ",(0,n.yg)("em",{parentName:"li"},"damagingEntity?: Entity")," - Gets the damaging Entity"),(0,n.yg)("li",{parentName:"ul"},"Added property ",(0,n.yg)("em",{parentName:"li"},"damagingProjectile?: Entity")," - Gets the damaging projectile Entity"),(0,n.yg)("li",{parentName:"ul"},"Added function ",(0,n.yg)("em",{parentName:"li"},"applyDamage(amount: number, source?: EntityDamageSource): boolean")," - Applies damage to the Entity and returns the result of the operation"))),(0,n.yg)("li",{parentName:"ul"},"Dimension",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Added function ",(0,n.yg)("em",{parentName:"li"},"fillBlocks(begin: BlockLocation, end: BlockLocation, block: BlockPermutation | BlockType, options?: BlockFillOptions): number"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Fills an area between ",(0,n.yg)("em",{parentName:"li"},"begin")," and ",(0,n.yg)("em",{parentName:"li"},"end")," with block of type block. Returns number of blocks placed"))),(0,n.yg)("li",{parentName:"ul"},"Added new interface ",(0,n.yg)("em",{parentName:"li"},"BlockFillOptions")," with member ",(0,n.yg)("em",{parentName:"li"},"matchingBlock?: BlockPermutation | BlockType"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Used with ",(0,n.yg)("em",{parentName:"li"},"fillBlocks")," to apply additional options, such as only filling blocks matching ",(0,n.yg)("em",{parentName:"li"},"matchingBlock")))),(0,n.yg)("li",{parentName:"ul"},"Player",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Added function ",(0,n.yg)("em",{parentName:"li"},"addLevels(amount: number): number")," - Adds/Removes level to/from the Player and returns the current level of the Player"),(0,n.yg)("li",{parentName:"ul"},"Added function ",(0,n.yg)("em",{parentName:"li"},"addExperience(amount: number): number")," - Adds/Removes experience to/from the Player and returns the current experience of the Player"),(0,n.yg)("li",{parentName:"ul"},"Added function ",(0,n.yg)("em",{parentName:"li"},"resetLevel(): void")," - Resets the level of the Player"),(0,n.yg)("li",{parentName:"ul"},"Added function ",(0,n.yg)("em",{parentName:"li"},"getTotalXp(): number")," - Gets the total experience of the Player"),(0,n.yg)("li",{parentName:"ul"},"Added read-only property ",(0,n.yg)("em",{parentName:"li"},"level")," - Gets the level of the Player"),(0,n.yg)("li",{parentName:"ul"},"Added read-only property ",(0,n.yg)("em",{parentName:"li"},"xpEarnedAtCurrentLevel")," - Gets the experience earned at the current level of the Player"),(0,n.yg)("li",{parentName:"ul"},"Added read-only property ",(0,n.yg)("em",{parentName:"li"},"totalXpNeededForNextLevel")," - Gets the total experience required for the current level of the Player")))))))))}y.isMDXComponent=!0}}]);