"use strict";(self.webpackChunkbedrock_tech=self.webpackChunkbedrock_tech||[]).push([[45430,29933],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>b});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),u=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=u(r),m=n,b=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return r?a.createElement(b,l(l({ref:t},s),{},{components:r})):a.createElement(b,l({ref:t},s))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:n,l[1]=i;for(var u=2;u<o;u++)l[u]=r[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},85162:(e,t,r)=>{r.d(t,{Z:()=>l});var a=r(67294),n=r(86010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:r,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(o,l),hidden:r},t)}},31792:(e,t,r)=>{r.d(t,{Z:()=>N});var a=r(87462),n=r(67294),o=r(86010),l=r(12466),i=r(16550),c=r(91980),u=r(67392),s=r(50012);function p(e){return function(e){return n.Children.map(e,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:r,attributes:a,default:n}}=e;return{value:t,label:r,attributes:a,default:n}}))}function d(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??p(r);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function m(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:r}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,c._X)(o),(0,n.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function h(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,o=d(e),[l,i]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=r.find((e=>e.default))??r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[c,u]=b({queryString:r,groupId:a}),[p,h]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,s.Nk)(r);return[a,(0,n.useCallback)((e=>{r&&o.set(e)}),[r,o])]}({groupId:a}),f=(()=>{const e=c??p;return m({value:e,tabValues:o})?e:null})();(0,n.useEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),h(e)}),[u,h,o]),tabValues:o}}var f=r(72389);const g="tabList_TRJ7",y="tabItem_hGfb";function v(e){let{className:t,block:r,selectedValue:i,selectValue:c,tabValues:u,rightElement:s}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),m=e=>{const t=e.currentTarget,r=p.indexOf(t),a=u[r].value;a!==i&&(d(t),c(a))},b=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const r=p.indexOf(e.currentTarget)+1;t=p[r]??p[0];break}case"ArrowLeft":{const r=p.indexOf(e.currentTarget)-1;t=p[r]??p[p.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},t)},u.map((e=>{let{value:t,label:r,attributes:l}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:b,onClick:m},l,{className:(0,o.Z)("tabs__item",y,l?.className,{"tabs__item--active":i===t}),style:{wordBreak:"keep-all"}}),r??t)})),s?n.createElement("div",{className:"w-full"},s):void 0)}function k(e){let{lazy:t,children:r,selectedValue:a}=e;if(t){const e=r.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=h(e);return n.createElement("div",{className:(0,o.Z)("tabs-container",g)},n.createElement(v,(0,a.Z)({},e,t)),n.createElement(k,(0,a.Z)({},e,t)))}function N(e){const t=(0,f.Z)();return n.createElement(w,(0,a.Z)({key:String(t)},e))}},62581:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=r(87462),n=(r(67294),r(3905));r(47153);const o={},l=void 0,i={unversionedId:"changelog_source/preview/1.19/0/26-27/tech",id:"changelog_source/preview/1.19/0/26-27/tech",title:"tech",description:"JSON",source:"@site/docs/changelog_source/preview/1.19/0/26-27/tech.mdx",sourceDirName:"changelog_source/preview/1.19/0/26-27",slug:"/changelog_source/preview/1.19/0/26-27/tech",permalink:"/docs/changelog_source/preview/1.19/0/26-27/tech",draft:!1,editUrl:"https://github.com/AbbottMc/BedrockTechWeekly/tree/master/docs/changelog_source/preview/1.19/0/26-27/tech.mdx",tags:[],version:"current",frontMatter:{}},c={},u=[{value:"<strong>JSON</strong>",id:"json",level:2},{value:"<strong>GameTest Framework (Experimental)</strong>",id:"gametest-framework-experimental",level:2}],s={toc:u};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"json"},(0,n.kt)("strong",{parentName:"h2"},"JSON")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Fixed an issue that caused weights to not be used for Music")),(0,n.kt)("h2",{id:"gametest-framework-experimental"},(0,n.kt)("strong",{parentName:"h2"},"GameTest Framework (Experimental)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Updated the GameTest Framework interface to add read-only scoreboard support"),(0,n.kt)("li",{parentName:"ul"},"World",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"scoreboard : Scoreboard - Access world's scoreboard"))),(0,n.kt)("li",{parentName:"ul"},"Entity",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"scoreboard : ScoreboardIdentity - Access the entities scoreboard identity"))),(0,n.kt)("li",{parentName:"ul"},"Scoreboard - Object representing the scoreboard data",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"getObjective(objectiveId : String) : ScoreboardObjective - Method to get a specific objective (by id)"),(0,n.kt)("li",{parentName:"ul"},"getObjectives : ScoreboardObjective","[","]"," - Method to get all objectives"),(0,n.kt)("li",{parentName:"ul"},"getParticipants : ScoreboardIdentity","[","]"," - Method to get all scoreboard identities"))),(0,n.kt)("li",{parentName:"ul"},"ScoreboardObjective - Object representing a scoreboard objective",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"id : String - (read-only) scoreboard identifier"),(0,n.kt)("li",{parentName:"ul"},"displayName : String - (read-only) scoreboard display name"),(0,n.kt)("li",{parentName:"ul"},"getParticipants : ScoreboardIdentity","[","]"," - Method to get all objective participant identities"),(0,n.kt)("li",{parentName:"ul"},"getScores : ScoreboardScoreInfo","[","]"," - Method to get the score info for all participants"),(0,n.kt)("li",{parentName:"ul"},"getScore(participant : ScoreboardIdentity) : Int - Method to get the score value of a participant"))),(0,n.kt)("li",{parentName:"ul"},"ScoreboardIdentity - Object representing a scoreboard participant",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"type : ScoreboardIdentityType - (read-only) enum representing the type of identity"),(0,n.kt)("li",{parentName:"ul"},"id : Int - (read-only) Unique identifier for the identity"),(0,n.kt)("li",{parentName:"ul"},"displayName : String - (read-only) display name for the identity"),(0,n.kt)("li",{parentName:"ul"},"getEntity : ScriptActor - get the ScriptActor handle associated with the identity"))),(0,n.kt)("li",{parentName:"ul"},"ScoreboardIdentityType - Enum representing identity types : .Entity - An entity .FakePlayer - A fake identity .Player - A player"),(0,n.kt)("li",{parentName:"ul"},"ScoreboardScoreInfo - Score-Identity pair for an objective",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"participant : ScoreboardIdentity - (read-only) The participant"),(0,n.kt)("li",{parentName:"ul"},"score : Int - (read-only) The score")))))}p.isMDXComponent=!0},47153:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>b,frontMatter:()=>c,metadata:()=>s,toc:()=>d});var a=r(87462),n=r(67294),o=r(3905),l=r(31792),i=r(85162);const c={},u=void 0,s={unversionedId:"components/TechChangelogSwitcher",id:"components/TechChangelogSwitcher",title:"TechChangelogSwitcher",description:"{",source:"@site/docs/components/TechChangelogSwitcher.mdx",sourceDirName:"components",slug:"/components/TechChangelogSwitcher",permalink:"/docs/components/TechChangelogSwitcher",draft:!1,editUrl:"https://github.com/AbbottMc/BedrockTechWeekly/tree/master/docs/components/TechChangelogSwitcher.mdx",tags:[],version:"current",frontMatter:{}},p={},d=[],m={toc:d};function b(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(n.Fragment,null,void 0!==r.techSapiDiff?(0,o.kt)(l.Z,{className:"changelog_sapi_tabs",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"\u66f4\u65b0\u63cf\u8ff0",mdxType:"TabItem"},r.techSapi),(0,o.kt)(i.Z,{value:"\u63a5\u53e3\u53d8\u52a8",mdxType:"TabItem"},r.techSapiDiff)):(0,o.kt)(n.Fragment,null,r.techSapi)))}b.isMDXComponent=!0}}]);