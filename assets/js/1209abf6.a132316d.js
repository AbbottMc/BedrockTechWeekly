"use strict";(self.webpackChunkbedrock_tech=self.webpackChunkbedrock_tech||[]).push([[11691],{3905:(e,t,n)=>{n.d(t,{Zo:()=>k,kt:()=>m});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},k=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,k=o(e,["components","mdxType","originalType","parentName"]),s=d(n),c=l,m=s["".concat(p,".").concat(c)]||s[c]||u[c]||i;return n?a.createElement(m,r(r({ref:t},k),{},{components:n})):a.createElement(m,r({ref:t},k))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:l,r[1]=o;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},55677:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(87462),l=(n(67294),n(3905));const i={id:"BlockProperties",title:"Class: BlockProperties",sidebar_label:"BlockProperties",sidebar_position:0,custom_edit_url:null},r=void 0,o={unversionedId:"sapi/stable/server/classes/BlockProperties",id:"sapi/stable/server/classes/BlockProperties",title:"Class: BlockProperties",description:"Returns an enumeration of available block properties.",source:"@site/docs/sapi/stable/server/classes/BlockProperties.md",sourceDirName:"sapi/stable/server/classes",slug:"/sapi/stable/server/classes/BlockProperties",permalink:"/docs/sapi/stable/server/classes/BlockProperties",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"BlockProperties",title:"Class: BlockProperties",sidebar_label:"BlockProperties",sidebar_position:0,custom_edit_url:null},sidebar:"sapiStableSidebar",previous:{title:"BlockPotionContainerComponent",permalink:"/docs/sapi/stable/server/classes/BlockPotionContainerComponent"},next:{title:"BlockRecordPlayerComponent",permalink:"/docs/sapi/stable/server/classes/BlockRecordPlayerComponent"}},p={},d=[{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Properties",id:"properties",level:2},{value:"active",id:"active",level:3},{value:"age",id:"age",level:3},{value:"ageBit",id:"agebit",level:3},{value:"allowUnderwaterBit",id:"allowunderwaterbit",level:3},{value:"attachedBit",id:"attachedbit",level:3},{value:"attachment",id:"attachment",level:3},{value:"bambooLeafSize",id:"bambooleafsize",level:3},{value:"bambooStalkThickness",id:"bamboostalkthickness",level:3},{value:"bigDripleafHead",id:"bigdripleafhead",level:3},{value:"bigDripleafTilt",id:"bigdripleaftilt",level:3},{value:"biteCounter",id:"bitecounter",level:3},{value:"blockLightLevel",id:"blocklightlevel",level:3},{value:"bloom",id:"bloom",level:3},{value:"booksStored",id:"booksstored",level:3},{value:"brewingStandSlotABit",id:"brewingstandslotabit",level:3},{value:"brewingStandSlotBBit",id:"brewingstandslotbbit",level:3},{value:"brewingStandSlotCBit",id:"brewingstandslotcbit",level:3},{value:"buttonPressedBit",id:"buttonpressedbit",level:3},{value:"canSummon",id:"cansummon",level:3},{value:"candles",id:"candles",level:3},{value:"cauldronLiquid",id:"cauldronliquid",level:3},{value:"chemistryTableType",id:"chemistrytabletype",level:3},{value:"chiselType",id:"chiseltype",level:3},{value:"clusterCount",id:"clustercount",level:3},{value:"color",id:"color",level:3},{value:"colorBit",id:"colorbit",level:3},{value:"composterFillLevel",id:"composterfilllevel",level:3},{value:"conditionalBit",id:"conditionalbit",level:3},{value:"coralColor",id:"coralcolor",level:3},{value:"coralDirection",id:"coraldirection",level:3},{value:"coralFanDirection",id:"coralfandirection",level:3},{value:"coralHangTypeBit",id:"coralhangtypebit",level:3},{value:"coveredBit",id:"coveredbit",level:3},{value:"crackedState",id:"crackedstate",level:3},{value:"damage",id:"damage",level:3},{value:"deadBit",id:"deadbit",level:3},{value:"deprecated",id:"deprecated",level:3},{value:"direction",id:"direction",level:3},{value:"dirtType",id:"dirttype",level:3},{value:"disarmedBit",id:"disarmedbit",level:3},{value:"doorHingeBit",id:"doorhingebit",level:3},{value:"doublePlantType",id:"doubleplanttype",level:3},{value:"dragDown",id:"dragdown",level:3},{value:"dripstoneThickness",id:"dripstonethickness",level:3},{value:"endPortalEyeBit",id:"endportaleyebit",level:3},{value:"explodeBit",id:"explodebit",level:3},{value:"extinguished",id:"extinguished",level:3},{value:"facingDirection",id:"facingdirection",level:3},{value:"fillLevel",id:"filllevel",level:3},{value:"flowerType",id:"flowertype",level:3},{value:"groundSignDirection",id:"groundsigndirection",level:3},{value:"growingPlantAge",id:"growingplantage",level:3},{value:"growth",id:"growth",level:3},{value:"hanging",id:"hanging",level:3},{value:"headPieceBit",id:"headpiecebit",level:3},{value:"height",id:"height",level:3},{value:"honeyLevel",id:"honeylevel",level:3},{value:"hugeMushroomBits",id:"hugemushroombits",level:3},{value:"inWallBit",id:"inwallbit",level:3},{value:"infiniburnBit",id:"infiniburnbit",level:3},{value:"itemFrameMapBit",id:"itemframemapbit",level:3},{value:"itemFramePhotoBit",id:"itemframephotobit",level:3},{value:"kelpAge",id:"kelpage",level:3},{value:"leverDirection",id:"leverdirection",level:3},{value:"liquidDepth",id:"liquiddepth",level:3},{value:"lit",id:"lit",level:3},{value:"moisturizedAmount",id:"moisturizedamount",level:3},{value:"monsterEggStoneType",id:"monstereggstonetype",level:3},{value:"multiFaceDirectionBits",id:"multifacedirectionbits",level:3},{value:"newLeafType",id:"newleaftype",level:3},{value:"newLogType",id:"newlogtype",level:3},{value:"noDropBit",id:"nodropbit",level:3},{value:"occupiedBit",id:"occupiedbit",level:3},{value:"oldLeafType",id:"oldleaftype",level:3},{value:"oldLogType",id:"oldlogtype",level:3},{value:"openBit",id:"openbit",level:3},{value:"outputLitBit",id:"outputlitbit",level:3},{value:"outputSubtractBit",id:"outputsubtractbit",level:3},{value:"persistentBit",id:"persistentbit",level:3},{value:"pillarAxis",id:"pillaraxis",level:3},{value:"portalAxis",id:"portalaxis",level:3},{value:"poweredBit",id:"poweredbit",level:3},{value:"prismarineBlockType",id:"prismarineblocktype",level:3},{value:"propaguleStage",id:"propagulestage",level:3},{value:"railDataBit",id:"raildatabit",level:3},{value:"railDirection",id:"raildirection",level:3},{value:"redstoneSignal",id:"redstonesignal",level:3},{value:"repeaterDelay",id:"repeaterdelay",level:3},{value:"respawnAnchorCharge",id:"respawnanchorcharge",level:3},{value:"rotation",id:"rotation",level:3},{value:"sandStoneType",id:"sandstonetype",level:3},{value:"sandType",id:"sandtype",level:3},{value:"saplingType",id:"saplingtype",level:3},{value:"seaGrassType",id:"seagrasstype",level:3},{value:"spongeType",id:"spongetype",level:3},{value:"stability",id:"stability",level:3},{value:"stabilityCheck",id:"stabilitycheck",level:3},{value:"stoneBrickType",id:"stonebricktype",level:3},{value:"stoneSlabType",id:"stoneslabtype",level:3},{value:"stoneSlabType2",id:"stoneslabtype2",level:3},{value:"stoneSlabType3",id:"stoneslabtype3",level:3},{value:"stoneSlabType4",id:"stoneslabtype4",level:3},{value:"stoneType",id:"stonetype",level:3},{value:"strippedBit",id:"strippedbit",level:3},{value:"structureBlockType",id:"structureblocktype",level:3},{value:"structureVoidType",id:"structurevoidtype",level:3},{value:"suspendedBit",id:"suspendedbit",level:3},{value:"tallGrassType",id:"tallgrasstype",level:3},{value:"toggleBit",id:"togglebit",level:3},{value:"topSlotBit",id:"topslotbit",level:3},{value:"torchFacingDirection",id:"torchfacingdirection",level:3},{value:"triggeredBit",id:"triggeredbit",level:3},{value:"turtleEggCount",id:"turtleeggcount",level:3},{value:"twistingVinesAge",id:"twistingvinesage",level:3},{value:"updateBit",id:"updatebit",level:3},{value:"upperBlockBit",id:"upperblockbit",level:3},{value:"upsideDownBit",id:"upsidedownbit",level:3},{value:"vineDirectionBits",id:"vinedirectionbits",level:3},{value:"wallBlockType",id:"wallblocktype",level:3},{value:"wallConnectionTypeEast",id:"wallconnectiontypeeast",level:3},{value:"wallConnectionTypeNorth",id:"wallconnectiontypenorth",level:3},{value:"wallConnectionTypeSouth",id:"wallconnectiontypesouth",level:3},{value:"wallConnectionTypeWest",id:"wallconnectiontypewest",level:3},{value:"wallPostBit",id:"wallpostbit",level:3},{value:"weepingVinesAge",id:"weepingvinesage",level:3},{value:"weirdoDirection",id:"weirdodirection",level:3},{value:"woodType",id:"woodtype",level:3}],k={toc:d};function s(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Returns an enumeration of available block properties."),(0,l.kt)("h2",{id:"constructors"},"Constructors"),(0,l.kt)("h3",{id:"constructor"},"constructor"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("inlineCode",{parentName:"p"},"Protected")," ",(0,l.kt)("strong",{parentName:"p"},"new BlockProperties"),"()"),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("h3",{id:"active"},"active"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"active"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"active"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"age"},"age"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"age"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"age"')),(0,l.kt)("p",null,"Integer property that represents the age of the block. Valid\nvalues are between 0 and 15 inclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"agebit"},"ageBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"ageBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"age_bit"')),(0,l.kt)("p",null,"Boolean property that determines if saplings should grow."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"allowunderwaterbit"},"allowUnderwaterBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"allowUnderwaterBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"allow_underwater_bit"')),(0,l.kt)("p",null,"Boolean property that determines if an explosion propagates\nunderwater."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"attachedbit"},"attachedBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"attachedBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"attached_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a tripwire is attached\nto another tripwire."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"attachment"},"attachment"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"attachment"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"attachment"')),(0,l.kt)("p",null,"String property that represents the type of attachment used\nby a bell or grindstone block. Valid values are 'standing',\n'hanging', 'side' and 'multiple'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"bambooleafsize"},"bambooLeafSize"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"bambooLeafSize"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"bamboo_leaf_size"')),(0,l.kt)("p",null,"String property that determines the thickness of a bamboo\nstalk. Valid values are 'thin' and 'thick'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"bamboostalkthickness"},"bambooStalkThickness"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"bambooStalkThickness"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"bamboo_stalk_thickness"')),(0,l.kt)("p",null,"String property that determines the size of bamboo leaves.\nValid values are 'no_leaves', 'small_leaves', and\n'large_leaves'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"bigdripleafhead"},"bigDripleafHead"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"bigDripleafHead"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"big_dripleaf_head"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"bigdripleaftilt"},"bigDripleafTilt"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"bigDripleafTilt"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"big_dripleaf_tilt"')),(0,l.kt)("p",null,"String property that represents the tilt state of big\ndripleaf block. Valid values are 'none', 'unstable',\n'partial_tilt' and 'full_tilt'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"bitecounter"},"biteCounter"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"biteCounter"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"bite_counter"')),(0,l.kt)("p",null,"Integer property that tracks how many bites of cake have\nbeen taken. Valid values are between 0 and 6 inclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"blocklightlevel"},"blockLightLevel"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"blockLightLevel"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"block_light_level"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"bloom"},"bloom"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"bloom"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"bloom"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"booksstored"},"booksStored"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"booksStored"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"books_stored"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"brewingstandslotabit"},"brewingStandSlotABit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"brewingStandSlotABit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"brewing_stand_slot_a_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a bottle is shown in the\nfirst slot of the brewing stand."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"brewingstandslotbbit"},"brewingStandSlotBBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"brewingStandSlotBBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"brewing_stand_slot_b_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a bottle is shown in the\nsecond slot of the brewing stand."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"brewingstandslotcbit"},"brewingStandSlotCBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"brewingStandSlotCBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"brewing_stand_slot_c_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a bottle is shown in the\nthird slot of the brewing stand."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"buttonpressedbit"},"buttonPressedBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"buttonPressedBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"button_pressed_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a button is in a pressed\nstate or not."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"cansummon"},"canSummon"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"canSummon"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"can_summon"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"candles"},"candles"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"candles"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"candles"')),(0,l.kt)("p",null,"Integer property that describes how many extra candles are\nin the same block space. Valid values are between 0 and 3\ninclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"cauldronliquid"},"cauldronLiquid"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"cauldronLiquid"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"cauldron_liquid"')),(0,l.kt)("p",null,"String property that represents the type of liquid in a\ncauldron. Valid values are 'water', 'powder_snow', and\n'lava'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"chemistrytabletype"},"chemistryTableType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"chemistryTableType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"chemistry_table_type"')),(0,l.kt)("p",null,"String property that represents the type of work benches\nthat are within Minecraft Education experiences. Valid\nvalues are 'compound_creator', 'material_reducer',\n'element_constructor' and 'lab_table'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"chiseltype"},"chiselType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"chiselType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"chisel_type"')),(0,l.kt)("p",null,"String property determines the pattern of quartz and purpur\nblocks. Valid values are 'default', 'chiseled', 'lines',\n'smooth'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"clustercount"},"clusterCount"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"clusterCount"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"cluster_count"')),(0,l.kt)("p",null,"Integer property that describes how many sea pickles are in\na cluster. Valid values are between 0 and 3 inclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"color"},"color"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"color"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"color"')),(0,l.kt)("p",null,"String property that represents the color of a block, like\nwool. Valid values are 'white', 'orange', 'magenta',\n'light_blue', 'yellow', 'lime', 'pink', 'gray', 'silver',\n'cyan', 'purple', 'blue', 'brown', 'green', 'red' and\n'black'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"colorbit"},"colorBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"colorBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"color_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a torch has a particular\ncolor."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"composterfilllevel"},"composterFillLevel"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"composterFillLevel"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"composter_fill_level"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"conditionalbit"},"conditionalBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"conditionalBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"conditional_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a command block is\nconditional or not."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"coralcolor"},"coralColor"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"coralColor"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"coral_color"')),(0,l.kt)("p",null,"String property that represents the color of a coral block.\nValid values are 'blue', 'pink', 'purple', 'red', 'yellow',\n'blue dead', 'pink dead', 'red dead', and 'yellow dead'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"coraldirection"},"coralDirection"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"coralDirection"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"coral_direction"')),(0,l.kt)("p",null,"Integer property that describes the rotation of coral fans.\nValid values are between 0 and 3 inclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"coralfandirection"},"coralFanDirection"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"coralFanDirection"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"coral_fan_direction"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"coralhangtypebit"},"coralHangTypeBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"coralHangTypeBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"coral_hang_type_bit"')),(0,l.kt)("p",null,"Boolean property that represents the type of hanging for\ncoral fan."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"coveredbit"},"coveredBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"coveredBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"covered_bit"')),(0,l.kt)("p",null,"Boolean property that describes if a top snow block is\ncovering another block."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"crackedstate"},"crackedState"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"crackedState"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"cracked_state"')),(0,l.kt)("p",null,"String property that determines the cracked state of turtle\neggs. Valid values are 'no_cracks', 'cracked', and\n'max_cracked'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"damage"},"damage"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"damage"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"damage"')),(0,l.kt)("p",null,"String property that determines the damage state of an\nanvil. Valid values are 'undamaged', 'slightly_damaged',\n'very_damaged', and 'broken'"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"deadbit"},"deadBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"deadBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"dead_bit"')),(0,l.kt)("p",null,"Boolean property that determines if coral, coral fans, or\nsea pickles are dead."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"deprecated"},"deprecated"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"deprecated"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"deprecated"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"direction"},"direction"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"direction"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"direction"')),(0,l.kt)("p",null,"Integer property determines the north, south, east, or west\ndirection of a block. Valid values include are south = 0,\nwest = 1, north = 2, east = 3."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"dirttype"},"dirtType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"dirtType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"dirt_type"')),(0,l.kt)("p",null,"String property that determines the dirt type of a block.\nValid values are 'normal' and 'coarse'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"disarmedbit"},"disarmedBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"disarmedBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"disarmed_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a tripwire is disarmed\nor not."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"doorhingebit"},"doorHingeBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"doorHingeBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"door_hinge_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a door's hinge is\nmirrored or not."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"doubleplanttype"},"doublePlantType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"doublePlantType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"double_plant_type"')),(0,l.kt)("p",null,"String property that represents the type of a double plant\nblock. Valid values are 'sunflower', 'syringa', 'grass',\n'fern', 'rose', and 'paeonia'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"dragdown"},"dragDown"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"dragDown"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"drag_down"')),(0,l.kt)("p",null,"Boolean property that describes if bubble columns drag\nentities down or push them up."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"dripstonethickness"},"dripstoneThickness"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"dripstoneThickness"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"dripstone_thickness"')),(0,l.kt)("p",null,"String property that represents the type of a pointed\ndripstone block. Valid values are 'tip', 'frustum', 'base',\n'middle' and 'merge'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"endportaleyebit"},"endPortalEyeBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"endPortalEyeBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"end_portal_eye_bit"')),(0,l.kt)("p",null,"Boolean property that determines if an end portal block has\nan Eye of Ender in it."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"explodebit"},"explodeBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"explodeBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"explode_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a TNT block should start\nits explode sequence."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"extinguished"},"extinguished"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"extinguished"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"extinguished"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"facingdirection"},"facingDirection"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"facingDirection"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"facing_direction"')),(0,l.kt)("p",null,"Integer property that determines the facing direction of\nsome types of blocks. Valid values include down = 0, up = 1,\nnorth = 2, south = 3, west = 4, east = 5."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"filllevel"},"fillLevel"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"fillLevel"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"fill_level"')),(0,l.kt)("p",null,"Integer property that determines the fill level of a\ncauldron block. Valid values are between 0 and 6 inclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"flowertype"},"flowerType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"flowerType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"flower_type"')),(0,l.kt)("p",null,"String property that represents the type of flow. Valid\nvalues are 'poppy', 'orchid', 'allium', 'houstonia',\n'tulip_red', 'tulip_orange', 'tulip_white', 'tulip_pink',\n'oxeye', 'cornflower' and 'lily_of_the_valley'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"groundsigndirection"},"groundSignDirection"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"groundSignDirection"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"ground_sign_direction"')),(0,l.kt)("p",null,"Integer property that represents the rotation of signs and\nstanding banners. Valid values are between 0 and 15\ninclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"growingplantage"},"growingPlantAge"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"growingPlantAge"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"growing_plant_age"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"growth"},"growth"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"growth"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"growth"')),(0,l.kt)("p",null,"Integer property that determines the growth level of crops.\nValid values are between 0 and 7 inclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"hanging"},"hanging"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"hanging"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"hanging"')),(0,l.kt)("p",null,"Boolean property that represents if a lantern block is\nhanging or not."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"headpiecebit"},"headPieceBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"headPieceBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"head_piece_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a block is the pillow\nside of a bed."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"height"},"height"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"height"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"height"')),(0,l.kt)("p",null,"Integer property that determines the height of a top snow\nblock. Valid values are between 0 and 7 inclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"honeylevel"},"honeyLevel"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"honeyLevel"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"honey_level"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"hugemushroombits"},"hugeMushroomBits"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"hugeMushroomBits"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"huge_mushroom_bits"')),(0,l.kt)("p",null,"Integer property that determines which huge mushroom block\nshould be displayed. Valid values are between 0 and 15\ninclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"inwallbit"},"inWallBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"inWallBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"in_wall_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a fence block is\nconnected to a wall block."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"infiniburnbit"},"infiniburnBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"infiniburnBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"infiniburn_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a block should burn\ninfinitely."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"itemframemapbit"},"itemFrameMapBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"itemFrameMapBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"item_frame_map_bit"')),(0,l.kt)("p",null,"Boolean property that describes if an item frame block has a\nmap in it."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"itemframephotobit"},"itemFramePhotoBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"itemFramePhotoBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"item_frame_photo_bit"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"kelpage"},"kelpAge"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"kelpAge"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"kelp_age"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"leverdirection"},"leverDirection"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"leverDirection"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"lever_direction"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"liquiddepth"},"liquidDepth"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"liquidDepth"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"liquid_depth"')),(0,l.kt)("p",null,"Integer property that represents the level of liquid blocks.\nValid values are between 0 and 15 inclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"lit"},"lit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"lit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"lit"')),(0,l.kt)("p",null,"Boolean property that determines if a block is lit or not."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"moisturizedamount"},"moisturizedAmount"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"moisturizedAmount"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"moisturized_amount"')),(0,l.kt)("p",null,"Integer property that represents the moisture level of crop.\nValid values are between 0 and 7 inclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"monstereggstonetype"},"monsterEggStoneType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"monsterEggStoneType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"monster_egg_stone_type"')),(0,l.kt)("p",null,"String property that represents the stone type of an\nInfested Stone block. Valid values are 'stone',\n'cobblestone', 'stone_brick', 'mossy_stone_brick',\n'cracked_stone_brick' and 'chiseled_stone_brick'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"multifacedirectionbits"},"multiFaceDirectionBits"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"multiFaceDirectionBits"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"multi_face_direction_bits"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"newleaftype"},"newLeafType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"newLeafType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"new_leaf_type"')),(0,l.kt)("p",null,"String property that represents the leaf type of some block\ntypes. Valid values are 'acacia' and 'dark_oak'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"newlogtype"},"newLogType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"newLogType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"new_log_type"')),(0,l.kt)("p",null,"String property that represents the wood type of certain\ntypes of blocks. Valid values are 'acacia' and 'dark_oak'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"nodropbit"},"noDropBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"noDropBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"no_drop_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a skull block should\ndrop loot."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"occupiedbit"},"occupiedBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"occupiedBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"occupied_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a bed block is occupied."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"oldleaftype"},"oldLeafType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"oldLeafType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"old_leaf_type"')),(0,l.kt)("p",null,"String property that represents the leaf type of some block\ntypes. Valid values are 'oak', 'spruce', 'birch', and\n'jungle'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"oldlogtype"},"oldLogType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"oldLogType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"old_log_type"')),(0,l.kt)("p",null,"String property that determines the wood type of certain\ntypes of blocks. Valid values are 'oak', 'spruce', 'birch'\nand 'jungle'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"openbit"},"openBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"openBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"open_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a door, gate, or\ntrapdoor is open."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"outputlitbit"},"outputLitBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"outputLitBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"output_lit_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a comparator's output is\nlit."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"outputsubtractbit"},"outputSubtractBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"outputSubtractBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"output_subtract_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a comparator is set to\nsubtract output."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"persistentbit"},"persistentBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"persistentBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"persistent_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a leaf block is\npersistent."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"pillaraxis"},"pillarAxis"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"pillarAxis"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"pillar_axis"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"portalaxis"},"portalAxis"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"portalAxis"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"portal_axis"')),(0,l.kt)("p",null,"String property that determines the orientation of portal\nblocks. Valid values include 'unknown', 'x', and 'z'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"poweredbit"},"poweredBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"poweredBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"powered_bit"')),(0,l.kt)("p",null,"Boolean property that is true when an observer or tripwire\nsends a redstone signal."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"prismarineblocktype"},"prismarineBlockType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"prismarineBlockType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"prismarine_block_type"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"propagulestage"},"propaguleStage"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"propaguleStage"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"propagule_stage"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"raildatabit"},"railDataBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"railDataBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"rail_data_bit"')),(0,l.kt)("p",null,"Boolean property that returns true if a rail has a redstone\nsignal."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"raildirection"},"railDirection"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"railDirection"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"rail_direction"')),(0,l.kt)("p",null,"Integer property determines the orientation of a placed rail\nblock. Valid values are between 0 and 8 inclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"redstonesignal"},"redstoneSignal"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"redstoneSignal"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"redstone_signal"')),(0,l.kt)("p",null,"Integer property that determines the signal strength of a\nredstone signal. Valid values are between 0 and 15\ninclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"repeaterdelay"},"repeaterDelay"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"repeaterDelay"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"repeater_delay"')),(0,l.kt)("p",null,"Integer property that represents the amount of delay of a\nrepeater. Valid values are between 0 and 3 inclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"respawnanchorcharge"},"respawnAnchorCharge"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"respawnAnchorCharge"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"respawn_anchor_charge"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"rotation"},"rotation"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"rotation"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"rotation"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sandstonetype"},"sandStoneType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"sandStoneType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"sand_stone_type"')),(0,l.kt)("p",null,"String property that represents the pattern of a sandstone\nblock. Valid values are 'default', 'heiroglyphs', 'cut', and\n'smooth'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sandtype"},"sandType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"sandType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"sand_type"')),(0,l.kt)("p",null,"String property that represents the sand type of a block.\nValid values are 'normal' and 'red'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"saplingtype"},"saplingType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"saplingType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"sapling_type"')),(0,l.kt)("p",null,"String property that determines the type of the sapling\nblock. Valid values are 'evergreen', 'birch', 'jungle',\n'acacia', and 'roofed_oak'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"seagrasstype"},"seaGrassType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"seaGrassType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"sea_grass_type"')),(0,l.kt)("p",null,"String property that determines the type of a sea grass\nblock. Valid values are 'default', 'double_top' and\n'double_bot'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"spongetype"},"spongeType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"spongeType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"sponge_type"')),(0,l.kt)("p",null,"String property that represents the type of a sponge block.\nValid values are 'dry' and 'wet'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stability"},"stability"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"stability"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"stability"')),(0,l.kt)("p",null,"Integer property that determines the stability of a\nscaffolding block. Valid values are between 0 and 5\ninclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stabilitycheck"},"stabilityCheck"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"stabilityCheck"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"stability_check"')),(0,l.kt)("p",null,"Boolean property that describes if a scaffolding block has\nbeen checked for stability."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stonebricktype"},"stoneBrickType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"stoneBrickType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"stone_brick_type"')),(0,l.kt)("p",null,"String property that determines the type of a stone brick\nblock. Valid values are 'default', 'mossy', 'cracked',\n'chiseled' and 'smooth'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stoneslabtype"},"stoneSlabType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"stoneSlabType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"stone_slab_type"')),(0,l.kt)("p",null,"String property that represents the type of certain types of\nstone slab blocks. Valid values are 'smooth_stone',\n'sandstone', 'wood', 'cobblestone', 'brick', 'stone_brick',\n'quartz' and 'nether_brick'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stoneslabtype2"},"stoneSlabType2"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"stoneSlabType2"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"stone_slab_type_2"')),(0,l.kt)("p",null,"String property that represents the type of certain types of\nstone slab blocks. Valid values are 'red_sandstone',\n'purpur', 'prismarine_rough', 'prismarine_dark',\n'prismarine_brick', 'mossy_cobblestone', 'smooth_sandstone'\nand 'red_nether_brick'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stoneslabtype3"},"stoneSlabType3"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"stoneSlabType3"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"stone_slab_type_3"')),(0,l.kt)("p",null,"String property that represents the type of certain types of\nstone slab blocks. Valid values are 'end_stone_brick',\n'smooth_red_sandstone', 'polished_andesite', 'andesite',\n'diorite', 'polished_diorite', 'granite', and\n'polished_granite'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stoneslabtype4"},"stoneSlabType4"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"stoneSlabType4"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"stone_slab_type_4"')),(0,l.kt)("p",null,"String property that represents the type of certain types of\nstone slab blocks. Valid values are 'mossy_stone_brick',\n'smooth_quartz', 'stone', 'cut_sandstone', and\n'cut_red_sandstone'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"stonetype"},"stoneType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"stoneType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"stone_type"')),(0,l.kt)("p",null,"String property that determines the type of a stone block.\nValid values are 'stone', 'granite', 'granite_smooth',\n'diorite', 'diorite_smooth', 'andesite', and\n'andesite_smooth'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"strippedbit"},"strippedBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"strippedBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"stripped_bit"')),(0,l.kt)("p",null,"Boolean property that represents if a wood log has been\nstripped of bark."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"structureblocktype"},"structureBlockType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"structureBlockType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"structure_block_type"')),(0,l.kt)("p",null,"String property that represents the state of a structure\nblock. Valid values are 'data', 'save', 'load', 'corner',\n'invalid' and 'export'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"structurevoidtype"},"structureVoidType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"structureVoidType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"structure_void_type"')),(0,l.kt)("p",null,"String property that determines which void mode to draw for\nstructure blocks. Valid values are 'void' and 'air'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"suspendedbit"},"suspendedBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"suspendedBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"suspended_bit"')),(0,l.kt)("p",null,"Boolean property that indicates if a tripwire block is\nsuspended."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"tallgrasstype"},"tallGrassType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"tallGrassType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"tall_grass_type"')),(0,l.kt)("p",null,"String property that represents the type of a tall grass\nblock. Valid values are 'default', 'tall', 'fern', and\n'snow'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"togglebit"},"toggleBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"toggleBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"toggle_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a hopper block is active\nor not."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"topslotbit"},"topSlotBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"topSlotBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"top_slot_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a slab is the top half\nof the block or not"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"torchfacingdirection"},"torchFacingDirection"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"torchFacingDirection"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"torch_facing_direction"')),(0,l.kt)("p",null,"String property that determines the direction of a torch in\nrelation to the block it is attached to. Valid values are\n'unknown', 'west', 'east', 'north', 'south', 'top'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"triggeredbit"},"triggeredBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"triggeredBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"triggered_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a dispenser is\ntriggered."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"turtleeggcount"},"turtleEggCount"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"turtleEggCount"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"turtle_egg_count"')),(0,l.kt)("p",null,"String property that represents the amount of turtle eggs in\nan egg block. Valid values are 'one_egg', 'two_egg',\n'three_egg' and 'four_egg'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"twistingvinesage"},"twistingVinesAge"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"twistingVinesAge"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"twisting_vines_age"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"updatebit"},"updateBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"updateBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"update_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a leaf block or flower\nblock should be updated."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"upperblockbit"},"upperBlockBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"upperBlockBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"upper_block_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a block is the upper\nhalf of an object like a door or a tall plant."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"upsidedownbit"},"upsideDownBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"upsideDownBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"upside_down_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a stair block or\ntrapdoor block is upside-down."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"vinedirectionbits"},"vineDirectionBits"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"vineDirectionBits"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"vine_direction_bits"')),(0,l.kt)("p",null,"Integer property that represents the facing direction for\nvines. Valid values are between 0 and 15 inclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"wallblocktype"},"wallBlockType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"wallBlockType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"wall_block_type"')),(0,l.kt)("p",null,"String property that represents the type of stone used in a\nwall block. Valid values are 'cobblestone',\n'mossy_cobblestone', 'granite', 'diorite', 'andesite',\n'sandstone', 'brick', 'stone_brick', 'mossy_stone_brick',\n'nether_brick', 'end_brick', 'prismarine', 'red_sandstone'\nand 'red_nether_brick'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"wallconnectiontypeeast"},"wallConnectionTypeEast"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"wallConnectionTypeEast"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"wall_connection_type_east"')),(0,l.kt)("p",null,"String property that determines what kind of connection a\nwall has to the east. Valid values are 'none', 'short' and\n'tall'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"wallconnectiontypenorth"},"wallConnectionTypeNorth"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"wallConnectionTypeNorth"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"wall_connection_type_north"')),(0,l.kt)("p",null,"String property that determines what kind of connection a\nwall has to the north. Valid values are 'none', 'short' and\n'tall'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"wallconnectiontypesouth"},"wallConnectionTypeSouth"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"wallConnectionTypeSouth"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"wall_connection_type_south"')),(0,l.kt)("p",null,"String property that determines what kind of connection a\nwall has to the south. Valid values are 'none', 'short' and\n'tall'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"wallconnectiontypewest"},"wallConnectionTypeWest"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"wallConnectionTypeWest"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"wall_connection_type_west"')),(0,l.kt)("p",null,"String property that determines what kind of connection a\nwall has to the west. Valid values are 'none', 'short' and\n'tall'."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"wallpostbit"},"wallPostBit"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"wallPostBit"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"wall_post_bit"')),(0,l.kt)("p",null,"Boolean property that determines if a wall should contain a\npost."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"weepingvinesage"},"weepingVinesAge"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"weepingVinesAge"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"weeping_vines_age"')),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"weirdodirection"},"weirdoDirection"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"weirdoDirection"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"weirdo_direction"')),(0,l.kt)("p",null,"Integer property that represents the rotation of stairs.\nValid values are between 0 and 3 inclusive."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"woodtype"},"woodType"),(0,l.kt)("p",null,"\u25aa ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,l.kt)("strong",{parentName:"p"},"woodType"),": ",(0,l.kt)("inlineCode",{parentName:"p"},'"wood_type"')),(0,l.kt)("p",null,"String property that determines the wood type of a block.\nValid values are 'oak', 'spruce', 'birch', 'jungle',\n'acacia', and 'dark_oak'."))}s.isMDXComponent=!0}}]);