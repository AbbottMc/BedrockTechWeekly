"use strict";(self.webpackChunkbedrock_tech=self.webpackChunkbedrock_tech||[]).push([[17397],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>c});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),g=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=g(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=g(t),m=r,c=d["".concat(s,".").concat(m)]||d[m]||y[m]||o;return t?a.createElement(c,l(l({ref:n},p),{},{components:t})):a.createElement(c,l({ref:n},p))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var g=2;g<o;g++)l[g]=t[g];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},72604:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>g});var a=t(58168),r=(t(96540),t(15680));const o={id:"BlockSignComponent",title:"Class: BlockSignComponent",sidebar_label:"BlockSignComponent",sidebar_position:0,custom_edit_url:null},l=void 0,i={unversionedId:"sapi/stable/server/classes/BlockSignComponent",id:"sapi/stable/server/classes/BlockSignComponent",title:"Class: BlockSignComponent",description:"Represents a block that can display text on it.",source:"@site/docs/sapi/stable/server/classes/BlockSignComponent.md",sourceDirName:"sapi/stable/server/classes",slug:"/sapi/stable/server/classes/BlockSignComponent",permalink:"/docs/sapi/stable/server/classes/BlockSignComponent",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"BlockSignComponent",title:"Class: BlockSignComponent",sidebar_label:"BlockSignComponent",sidebar_position:0,custom_edit_url:null},sidebar:"sapiStableSidebar",previous:{title:"BlockRecordPlayerComponent",permalink:"/docs/sapi/stable/server/classes/BlockRecordPlayerComponent"},next:{title:"BlockSnowContainerComponent",permalink:"/docs/sapi/stable/server/classes/BlockSnowContainerComponent"}},s={},g=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Overrides",id:"overrides",level:4},{value:"Properties",id:"properties",level:2},{value:"block",id:"block",level:3},{value:"Inherited from",id:"inherited-from",level:4},{value:"isWaxed",id:"iswaxed",level:3},{value:"typeId",id:"typeid",level:3},{value:"Inherited from",id:"inherited-from-1",level:4},{value:"componentId",id:"componentid",level:3},{value:"Methods",id:"methods",level:2},{value:"getRawText",id:"getrawtext",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"getText",id:"gettext",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"getTextDyeColor",id:"gettextdyecolor",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"isValid",id:"isvalid",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Inherited from",id:"inherited-from-2",level:4},{value:"setText",id:"settext",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"setTextDyeColor",id:"settextdyecolor",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"setWaxed",id:"setwaxed",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-6",level:4}],p={toc:g},d="wrapper";function y(e){let{components:n,...t}=e;return(0,r.yg)(d,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Represents a block that can display text on it."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"addTwoSidedSign.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"// A function the creates a sign at the specified location with text on both sides and dye colors\nimport {\n    DimensionLocation,\n    BlockPermutation,\n    BlockSignComponent,\n    BlockComponentTypes,\n    DyeColor,\n    SignSide,\n} from '@minecraft/server';\nimport { MinecraftBlockTypes } from '@minecraft/vanilla-data';\n\nfunction createSignAt(location: DimensionLocation) {\n    const block = location.dimension.getBlock(location);\n    if (!block) {\n        console.warn('Could not find a block at specified location.');\n        return;\n    }\n    const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, {\n        ground_sign_direction: 8,\n    });\n    block.setPermutation(signPerm);\n    const sign = block.getComponent(BlockComponentTypes.Sign);\n\n    if (sign !== undefined) {\n        sign.setText(`Party Sign!\\nThis is green on the front.`);\n        sign.setText(`Party Sign!\\nThis is red on the back.`, SignSide.Back);\n        sign.setTextDyeColor(DyeColor.Green);\n        sign.setTextDyeColor(DyeColor.Red, SignSide.Back);\n\n        // players cannot edit sign!\n        sign.setWaxed(true);\n    } else {\n        console.warn('Could not find a sign component on the block.');\n    }\n}\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"setSignText.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import {\n    BlockComponentTypes,\n    DimensionLocation,\n    RawMessage,\n    RawText,\n} from '@minecraft/server';\n\n// Function which updates a sign blocks text to raw text\nfunction updateSignText(signLocation: DimensionLocation) {\n    const block = signLocation.dimension.getBlock(signLocation);\n    if (!block) {\n        console.warn('Could not find a block at specified location.');\n        return;\n    }\n\n    const sign = block.getComponent(BlockComponentTypes.Sign);\n    if (sign) {\n        // RawMessage\n        const helloWorldMessage: RawMessage = { text: 'Hello World' };\n        sign.setText(helloWorldMessage);\n\n        // RawText\n        const helloWorldText: RawText = { rawtext: [{ text: 'Hello World' }] };\n        sign.setText(helloWorldText);\n\n        // Regular string\n        sign.setText('Hello World');\n    } else {\n        console.warn('Could not find a sign component on the block.');\n    }\n}\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"createTranslatedSign.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"// A function the creates a sign at the specified location with the specified text\nimport { DimensionLocation, BlockPermutation, BlockComponentTypes } from '@minecraft/server';\nimport { MinecraftBlockTypes } from '@minecraft/vanilla-data';\n\nfunction createSignAt(location: DimensionLocation) {\n    const signBlock = location.dimension.getBlock(location);\n\n    if (!signBlock) {\n        console.warn('Could not find a block at specified location.');\n        return;\n    }\n\n    const signPerm = BlockPermutation.resolve(MinecraftBlockTypes.StandingSign, { ground_sign_direction: 8 });\n    signBlock.setPermutation(signPerm); // Update block to be a sign\n\n    // Update the sign block's text\n    // with \"Steve's Head\"\n    const signComponent = signBlock.getComponent(BlockComponentTypes.Sign);\n    if (signComponent) {\n        signComponent.setText({ translate: 'item.skull.player.name', with: ['Steve'] });\n    }\n}\n")),(0,r.yg)("h2",{id:"hierarchy"},"Hierarchy"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/classes/BlockComponent"},(0,r.yg)("inlineCode",{parentName:"a"},"BlockComponent"))),(0,r.yg)("p",{parentName:"li"},"\u21b3 ",(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"BlockSignComponent"))))),(0,r.yg)("h2",{id:"constructors"},"Constructors"),(0,r.yg)("h3",{id:"constructor"},"constructor"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"Private")," ",(0,r.yg)("strong",{parentName:"p"},"new BlockSignComponent"),"()"),(0,r.yg)("h4",{id:"overrides"},"Overrides"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/classes/BlockComponent"},"BlockComponent"),".",(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/classes/BlockComponent#constructor"},"constructor")),(0,r.yg)("h2",{id:"properties"},"Properties"),(0,r.yg)("h3",{id:"block"},"block"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.yg)("strong",{parentName:"p"},"block"),": ",(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/classes/Block"},(0,r.yg)("inlineCode",{parentName:"a"},"Block"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Block instance that this component pertains to."),(0,r.yg)("h4",{id:"inherited-from"},"Inherited from"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/classes/BlockComponent"},"BlockComponent"),".",(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/classes/BlockComponent#block"},"block")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"iswaxed"},"isWaxed"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.yg)("strong",{parentName:"p"},"isWaxed"),": ",(0,r.yg)("inlineCode",{parentName:"p"},"boolean")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Whether or not players can edit the sign. This happens if a\nsign has had a honeycomb used on it or ",(0,r.yg)("inlineCode",{parentName:"p"},"setWaxed")," was called\non the sign."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"This property can throw when used."),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"typeid"},"typeId"),(0,r.yg)("p",null,"\u2022 ",(0,r.yg)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.yg)("strong",{parentName:"p"},"typeId"),": ",(0,r.yg)("inlineCode",{parentName:"p"},"string")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Identifier of the component."),(0,r.yg)("h4",{id:"inherited-from-1"},"Inherited from"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/classes/BlockComponent"},"BlockComponent"),".",(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/classes/BlockComponent#typeid"},"typeId")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"componentid"},"componentId"),(0,r.yg)("p",null,"\u25aa ",(0,r.yg)("inlineCode",{parentName:"p"},"Static")," ",(0,r.yg)("inlineCode",{parentName:"p"},"Readonly")," ",(0,r.yg)("strong",{parentName:"p"},"componentId"),": ",(0,r.yg)("inlineCode",{parentName:"p"},'"minecraft:sign"')),(0,r.yg)("h2",{id:"methods"},"Methods"),(0,r.yg)("h3",{id:"getrawtext"},"getRawText"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getRawText"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"side?"),"): ",(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/interfaces/RawText"},(0,r.yg)("inlineCode",{parentName:"a"},"RawText"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns the RawText of the sign if ",(0,r.yg)("inlineCode",{parentName:"p"},"setText")," was called with\na RawMessage or a RawText object, otherwise returns\nundefined."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"This function can throw errors."),(0,r.yg)("h4",{id:"parameters"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"side?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/docs/sapi/stable/server/enums/SignSide"},(0,r.yg)("inlineCode",{parentName:"a"},"SignSide"))),(0,r.yg)("td",{parentName:"tr",align:"left"},"The side of the sign to read the message from. If not provided, this will return the message from the front side of the sign.")))),(0,r.yg)("h4",{id:"returns"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/interfaces/RawText"},(0,r.yg)("inlineCode",{parentName:"a"},"RawText"))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"gettext"},"getText"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getText"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"side?"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"string")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns the text of the sign if ",(0,r.yg)("inlineCode",{parentName:"p"},"setText")," was called with a\nstring, otherwise returns undefined."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"This function can throw errors."),(0,r.yg)("h4",{id:"parameters-1"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"side?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/docs/sapi/stable/server/enums/SignSide"},(0,r.yg)("inlineCode",{parentName:"a"},"SignSide"))),(0,r.yg)("td",{parentName:"tr",align:"left"},"The side of the sign to read the message from. If not provided, this will return the message from the front side of the sign.")))),(0,r.yg)("h4",{id:"returns-1"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"string")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"gettextdyecolor"},"getTextDyeColor"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"getTextDyeColor"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"side?"),"): ",(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/enums/DyeColor"},(0,r.yg)("inlineCode",{parentName:"a"},"DyeColor"))),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Gets the dye that is on the text or undefined if the sign\nhas not been dyed."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"This function can throw errors."),(0,r.yg)("h4",{id:"parameters-2"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"side?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/docs/sapi/stable/server/enums/SignSide"},(0,r.yg)("inlineCode",{parentName:"a"},"SignSide"))),(0,r.yg)("td",{parentName:"tr",align:"left"},"The side of the sign to read the dye from. If not provided, this will return the dye on the front side of the sign.")))),(0,r.yg)("h4",{id:"returns-2"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/enums/DyeColor"},(0,r.yg)("inlineCode",{parentName:"a"},"DyeColor"))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"isvalid"},"isValid"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"isValid"),"(): ",(0,r.yg)("inlineCode",{parentName:"p"},"boolean")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Returns whether the component is valid. A component is\nconsidered valid if its owner is valid, in addition to any\naddition to any additional validation required by the\ncomponent."),(0,r.yg)("h4",{id:"returns-3"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"boolean")),(0,r.yg)("p",null,"Whether the component is valid."),(0,r.yg)("h4",{id:"inherited-from-2"},"Inherited from"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/classes/BlockComponent"},"BlockComponent"),".",(0,r.yg)("a",{parentName:"p",href:"/docs/sapi/stable/server/classes/BlockComponent#isvalid"},"isValid")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"settext"},"setText"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"setText"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"message"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"side?"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Sets the text of the sign component."),(0,r.yg)("p",null,"This function can't be called in read-only mode."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"Throws if the provided message is greater than 512\ncharacters in length."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Example"))),(0,r.yg)("p",null,"setSignText.ts"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import {\n    BlockComponentTypes,\n    DimensionLocation,\n    RawMessage,\n    RawText,\n} from '@minecraft/server';\n\n// Function which updates a sign blocks text to raw text\nfunction updateSignText(signLocation: DimensionLocation) {\n    const block = signLocation.dimension.getBlock(signLocation);\n    if (!block) {\n        console.warn('Could not find a block at specified location.');\n        return;\n    }\n\n    const sign = block.getComponent(BlockComponentTypes.Sign);\n    if (sign) {\n        // RawMessage\n        const helloWorldMessage: RawMessage = { text: 'Hello World' };\n        sign.setText(helloWorldMessage);\n\n        // RawText\n        const helloWorldText: RawText = { rawtext: [{ text: 'Hello World' }] };\n        sign.setText(helloWorldText);\n\n        // Regular string\n        sign.setText('Hello World');\n    } else {\n        console.warn('Could not find a sign component on the block.');\n    }\n}\n")),(0,r.yg)("h4",{id:"parameters-3"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"message")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.yg)("a",{parentName:"td",href:"/docs/sapi/stable/server/interfaces/RawText"},(0,r.yg)("inlineCode",{parentName:"a"},"RawText"))," ","|"," ",(0,r.yg)("a",{parentName:"td",href:"/docs/sapi/stable/server/interfaces/RawMessage"},(0,r.yg)("inlineCode",{parentName:"a"},"RawMessage"))),(0,r.yg)("td",{parentName:"tr",align:"left"},"The message to set on the sign. If set to a string, then call ",(0,r.yg)("inlineCode",{parentName:"td"},"getText")," to read that string. If set to a RawMessage, then calling ",(0,r.yg)("inlineCode",{parentName:"td"},"getRawText")," will return a RawText. If set to a RawText, then calling ",(0,r.yg)("inlineCode",{parentName:"td"},"getRawText")," will return the same object that was passed in.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"side?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/docs/sapi/stable/server/enums/SignSide"},(0,r.yg)("inlineCode",{parentName:"a"},"SignSide"))),(0,r.yg)("td",{parentName:"tr",align:"left"},"The side of the sign the message will be set on. If not provided, the message will be set on the front side of the sign.")))),(0,r.yg)("h4",{id:"returns-4"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"settextdyecolor"},"setTextDyeColor"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"setTextDyeColor"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"color?"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"side?"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Sets the dye color of the text."),(0,r.yg)("p",null,"This function can't be called in read-only mode."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"This function can throw errors."),(0,r.yg)("h4",{id:"parameters-4"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"color?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/docs/sapi/stable/server/enums/DyeColor"},(0,r.yg)("inlineCode",{parentName:"a"},"DyeColor"))),(0,r.yg)("td",{parentName:"tr",align:"left"},"The dye color to apply to the sign or undefined to clear the dye on the sign.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"side?")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("a",{parentName:"td",href:"/docs/sapi/stable/server/enums/SignSide"},(0,r.yg)("inlineCode",{parentName:"a"},"SignSide"))),(0,r.yg)("td",{parentName:"tr",align:"left"},"The side of the sign the color will be set on. If not provided, the color will be set on the front side of the sign.")))),(0,r.yg)("h4",{id:"returns-5"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"setwaxed"},"setWaxed"),(0,r.yg)("p",null,"\u25b8 ",(0,r.yg)("strong",{parentName:"p"},"setWaxed"),"(",(0,r.yg)("inlineCode",{parentName:"p"},"waxed"),"): ",(0,r.yg)("inlineCode",{parentName:"p"},"void")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.yg)("p",null,"Makes it so players cannot edit this sign."),(0,r.yg)("p",null,"This function can't be called in read-only mode."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"Throws"))),(0,r.yg)("p",null,"This function can throw errors."),(0,r.yg)("h4",{id:"parameters-5"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Name"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"waxed")),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"boolean"))))),(0,r.yg)("h4",{id:"returns-6"},"Returns"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"void")))}y.isMDXComponent=!0}}]);